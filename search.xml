<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringMVC-08：拦截器+文件上传下载</title>
      <link href="/2022/05/09/SpringMvc/SpringMVC-08%EF%BC%9A%E6%8B%A6%E6%88%AA%E5%99%A8+%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/"/>
      <url>/2022/05/09/SpringMvc/SpringMVC-08%EF%BC%9A%E6%8B%A6%E6%88%AA%E5%99%A8+%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SpringMVC-08：拦截器-文件上传下载"><a href="#SpringMVC-08：拦截器-文件上传下载" class="headerlink" title="SpringMVC-08：拦截器+文件上传下载"></a>SpringMVC-08：拦截器+文件上传下载</h1><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><h4 id="概述-："><a href="#概述-：" class="headerlink" title="概述 ："></a>概述 ：</h4><p> SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter,用于对处理器进行<strong>预处理和后处理</strong>。开发者 可以自己定义一些拦截器来实现特定的功能。 </p><p>过滤器与拦截器的区别：<strong>拦截器是AOP思想的具体应用</strong>。 </p><p><strong>过滤器</strong> </p><ul><li> servlet规范中的一部分，任何java web工程都可以使用 </li><li>在url-pattern中配置了/*之后，可以对所有要访问的资源进行拦截 </li></ul><p> <strong>拦截器</strong> </p><ul><li>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用 </li><li>拦截器只会拦截访问的控制器方法， 如果访问的是jsp/html/css/image/js是不会进行拦截的 </li></ul><h4 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h4><p> 那如何实现拦截器呢？ </p><p>想要自定义拦截器，<strong>必须实现 HandlerInterceptor 接口。</strong>  </p><ol><li><p> 新建一个Moudule ， springmvc-07-Interceptor ， 添加web支持 </p></li><li><p> 配置web.xml 和 springmvc-servlet.xml 文件 </p></li><li><p> 编写一个拦截器 </p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.kuang.interceptor;</span><br><span class="line">import org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">public class MyInterceptor implements HandlerInterceptor &#123;</span><br><span class="line">//在请求处理的方法之前执行</span><br><span class="line">//如果返回true执行下一个拦截器</span><br><span class="line">//如果返回false就不执行下一个拦截器</span><br><span class="line">public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse</span><br><span class="line">httpServletResponse, Object o) throws Exception &#123;</span><br><span class="line">System.out.println(&quot;------------处理前------------&quot;);</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">//在请求处理方法执行之后执行</span><br><span class="line">public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse</span><br><span class="line">httpServletResponse, Object o, ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line">System.out.println(&quot;------------处理后------------&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//在dispatcherServlet处理后执行,做清理工作.</span><br><span class="line">public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse</span><br><span class="line">httpServletResponse, Object o, Exception e) throws Exception &#123;</span><br><span class="line">System.out.println(&quot;------------清理------------&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li> 在springmvc的配置文件中配置拦截器 </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--关于拦截器的配置--&gt;</span><br><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">&lt;mvc:interceptor&gt;</span><br><span class="line">&lt;!--/** 包括路径及其子路径--&gt;</span><br><span class="line">&lt;!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截--&gt;</span><br><span class="line">&lt;!--/admin/** 拦截的是/admin/下的所有--&gt;</span><br><span class="line">&lt;mvc:mapping path=&quot;/**&quot;/&gt;</span><br><span class="line">&lt;!--bean配置的就是拦截器--&gt;</span><br><span class="line">&lt;bean class=&quot;com.kuang.interceptor.MyInterceptor&quot;/&gt;</span><br><span class="line">&lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li> 编写一个Controller，接收请求 </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.kuang.controller;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">//测试拦截器的控制器</span><br><span class="line">@Controller</span><br><span class="line">public class InterceptorController &#123;</span><br><span class="line">@RequestMapping(&quot;/interceptor&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String testFunction() &#123;</span><br><span class="line">System.out.println(&quot;控制器中的方法执行了&quot;);</span><br><span class="line">return &quot;hello&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li> 前端 index.jsp  </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/interceptor&quot;&gt;拦截器测试&lt;/a&gt;</span><br></pre></td></tr></table></figure><ol start="7"><li> 启动tomcat 测试一下！ </li></ol><p>   <img src="https://s1.ax1x.com/2022/06/22/j9tpWD.png" alt="1655896441426"></p><h4 id="验证用户是否登录-认证用户"><a href="#验证用户是否登录-认证用户" class="headerlink" title="验证用户是否登录 (认证用户)"></a>验证用户是否登录 (认证用户)</h4><p> <strong>实现思路</strong> </p><ol><li> 有一个登陆页面，需要写一个controller访问页面。 </li><li> 登陆页面有一提交表单的动作。需要在controller中处理。判断用户名密码是否正确。如果正确，向 session中写入用户信息。返回登陆成功。 </li><li> 拦截用户请求，判断用户是否登陆。如果用户已经登陆。放行， 如果用户未登陆，跳转到登陆页面 </li></ol><p><strong>测试：</strong></p><ol><li> 编写一个登陆页面 login.jsp </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;h1&gt;登录页面&lt;/h1&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/user/login&quot;&gt;</span><br><span class="line">用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt; &lt;br&gt;</span><br><span class="line">密码：&lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt; &lt;br&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li> 编写一个Controller处理请求 </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.kuang.controller;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/user&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line">//跳转到登陆页面</span><br><span class="line">@RequestMapping(&quot;/jumplogin&quot;)</span><br><span class="line">public String jumpLogin() throws Exception &#123;</span><br><span class="line">return &quot;login&quot;;</span><br><span class="line">&#125;</span><br><span class="line">//跳转到成功页面</span><br><span class="line">@RequestMapping(&quot;/jumpSuccess&quot;)</span><br><span class="line">public String jumpSuccess() throws Exception &#123;</span><br><span class="line">return &quot;success&quot;;</span><br><span class="line">&#125;</span><br><span class="line">//登陆提交</span><br><span class="line">@RequestMapping(&quot;/login&quot;)</span><br><span class="line">public String login(HttpSession session, String username, String pwd) throws Exception &#123;</span><br><span class="line">// 向session记录用户身份信息</span><br><span class="line">System.out.println(&quot;接收前端===&quot;+username);</span><br><span class="line">session.setAttribute(&quot;user&quot;, username);</span><br><span class="line">return &quot;success&quot;;</span><br><span class="line">&#125;</span><br><span class="line">//退出登陆</span><br><span class="line">@RequestMapping(&quot;logout&quot;)</span><br><span class="line">public String logout(HttpSession session) throws Exception &#123;</span><br><span class="line">// session 过期</span><br><span class="line">session.invalidate();</span><br><span class="line">return &quot;login&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li> 编写一个登陆成功的页面 success.jsp </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;登录成功页面&lt;/h1&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">$&#123;user&#125;</span><br><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/user/logout&quot;&gt;注销&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li> 在 index 页面上测试跳转！启动Tomcat 测试，未登录也可以进入主页！  </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;首页&lt;/h1&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;%--登录--%&gt;</span><br><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/user/jumplogin&quot;&gt;登录&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/user/jumpSuccess&quot;&gt;成功页面&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li> 编写用户登录拦截器</li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.kuang.interceptor;</span><br><span class="line">import org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">public class LoginInterceptor implements HandlerInterceptor &#123;</span><br><span class="line">public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object</span><br><span class="line">handler) throws ServletException, IOException &#123;</span><br><span class="line">// 如果是登陆页面则放行</span><br><span class="line">System.out.println(&quot;uri: &quot; + request.getRequestURI());</span><br><span class="line">if (request.getRequestURI().contains(&quot;login&quot;)) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">HttpSession session = request.getSession();</span><br><span class="line">// 如果用户已登陆也放行</span><br><span class="line">if(session.getAttribute(&quot;user&quot;) != null) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">// 用户没有登陆跳转到登陆页面</span><br><span class="line">request.getRequestDispatcher(&quot;/WEB-INF/jsp/login.jsp&quot;).forward(request, response);</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse</span><br><span class="line">httpServletResponse, Object o, ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line">&#125;</span><br><span class="line">public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse</span><br><span class="line">httpServletResponse, Object o, Exception e) throws Exception &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li> 在Springmvc的配置文件中<strong>注册拦截器</strong> </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--关于拦截器的配置--&gt;</span><br><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">&lt;mvc:interceptor&gt;</span><br><span class="line">&lt;mvc:mapping path=&quot;/**&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;loginInterceptor&quot; class=&quot;com.kuang.interceptor.LoginInterceptor&quot;/&gt;</span><br><span class="line">&lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure><ol start="7"><li> 再次重启Tomcat测试！ </li></ol><p> OK，测试登录拦截功能无误.  </p><h3 id="文件上传和下载"><a href="#文件上传和下载" class="headerlink" title="文件上传和下载"></a>文件上传和下载</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p> 文件上传是项目开发中最常见的功能之一 ,springMVC 可以很好的支持文件上传，但是SpringMVC上下文中 默认没有装配MultipartResolver，因此默认情况下其不能处理文件上传工作。如果想使用Spring的文件上传 功能，则需要在上下文中配置MultipartResolver。 前端表单要求：为了能上传文件，必须将表单的method设置为POST，并将enctype设置为multipart/formdata。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器； </p><p>对表单中的 enctype 属性做个详细的说明： </p><ul><li>application/x-www=form-urlencoded：默认方式，只处理表单域中的 value 属性值，采用这种编码方式的 表单会将表单域中的值处理成 URL 编码方式。 </li><li>multipart/form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定 文件的内容也封装到请求参数中，不会对字符编码。 </li><li>text/plain：除了把空格转换为 “+” 号外，其他字符都不做编码处理，这种方式适用直接通过表单发送邮 件。 </li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;&quot; enctype=&quot;multipart/form-data&quot; method=&quot;post&quot;&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; name=&quot;file&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p> 一旦设置了enctype为multipart/form-data，浏览器即会采用二进制流的方式来处理表单数据，而对于文件上 传的处理则涉及在服务器端解析原始的HTTP响应。在2003年，Apache Software Foundation发布了开源的 Commons FileUpload组件，其很快成为Servlet/JSP程序员上传文件的最佳选择。 </p><ul><li>Servlet3.0规范已经提供方法来处理文件上传，但这种上传需要在Servlet中完成。 </li><li>而Spring MVC则提供了更简单的封装。 </li><li>Spring MVC为文件上传提供了直接的支持，这种支持是用即插即用的MultipartResolver实现的。</li><li> Spring MVC使用Apache Commons FileUpload技术实现了一个MultipartResolver实现类： </li><li>CommonsMultipartResolver。因此，SpringMVC的文件上传还需要依赖Apache Commons FileUpload的 组件。 </li></ul><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><ol><li> 导入文件上传的<strong>jar包，commons-fileupload ， Maven</strong>会自动帮我们导入他的依赖包 commons-io包； </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--文件上传--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.3.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--servlet-api导入高版本的--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.0.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>配置bean：<strong>multipartResolver</strong>  </p><p> 【注意！！！这个bena的id必须为：multipartResolver ， 否则上传文件会报400的错误！在这里 栽过坑,教训！】 </p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--文件上传配置--&gt;</span><br><span class="line">&lt;bean id=&quot;multipartResolver&quot;</span><br><span class="line">class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</span><br><span class="line">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span><br><span class="line">&lt;property name=&quot;defaultEncoding&quot; value=&quot;utf-8&quot;/&gt;</span><br><span class="line">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span><br><span class="line">&lt;property name=&quot;maxUploadSize&quot; value=&quot;10485760&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;maxInMemorySize&quot; value=&quot;40960&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><pre><code>CommonsMultipartFile 的 常用方法：  </code></pre><ul><li> String getOriginalFilename()：获取上传文件的原名 </li><li>InputStream getInputStream()：获取文件流 </li><li>void transferTo(File dest)：将上传文件保存到一个目录文件中 </li></ul><ol start="3"><li> 编写前端页面 </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;/upload&quot; enctype=&quot;multipart/form-data&quot; method=&quot;post&quot;&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; name=&quot;file&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;upload&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li> Controller  </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.kuang.controller;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.multipart.commons.CommonsMultipartFile;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import java.io.*;</span><br><span class="line">@Controller</span><br><span class="line">public class FileController &#123;</span><br><span class="line">//@RequestParam(&quot;file&quot;) 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span><br><span class="line">//批量上传CommonsMultipartFile则为数组即可</span><br><span class="line">@RequestMapping(&quot;/upload&quot;)</span><br><span class="line">public String fileUpload(@RequestParam(&quot;file&quot;) CommonsMultipartFile file ,</span><br><span class="line">HttpServletRequest request) throws IOException &#123;</span><br><span class="line">//获取文件名 : file.getOriginalFilename();</span><br><span class="line">String uploadFileName = file.getOriginalFilename();</span><br><span class="line">//如果文件名为空，直接回到首页！</span><br><span class="line">if (&quot;&quot;.equals(uploadFileName))&#123;</span><br><span class="line">return &quot;redirect:/index.jsp&quot;;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;上传文件名 : &quot;+uploadFileName);</span><br><span class="line">//上传路径保存设置</span><br><span class="line">String path = request.getServletContext().getRealPath(&quot;/upload&quot;);</span><br><span class="line">//如果路径不存在，创建一个</span><br><span class="line">File realPath = new File(path);</span><br><span class="line">if (!realPath.exists())&#123;</span><br><span class="line">realPath.mkdir();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;上传文件保存地址：&quot;+realPath);</span><br><span class="line">InputStream is = file.getInputStream(); //文件输入流</span><br><span class="line">OutputStream os = new FileOutputStream(new File(realPath,uploadFileName)); //文件输出流</span><br><span class="line">//读取写出</span><br><span class="line">int len=0;</span><br><span class="line">byte[] buffer = new byte[1024];</span><br><span class="line">while ((len=is.read(buffer))!=-1)&#123;</span><br><span class="line">os.write(buffer,0,len);</span><br><span class="line">os.flush();</span><br><span class="line">&#125;</span><br><span class="line">os.close();</span><br><span class="line">is.close();</span><br><span class="line">return &quot;redirect:/index.jsp&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>采用file.Transto 来保存上传的文件</strong> </p><ol><li> 编写Controller  </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">* 采用file.Transto 来保存上传的文件</span><br><span class="line">*/</span><br><span class="line">@RequestMapping(&quot;/upload2&quot;)</span><br><span class="line">public String fileUpload2(@RequestParam(&quot;file&quot;) CommonsMultipartFile file,</span><br><span class="line">HttpServletRequest request) throws IOException &#123;</span><br><span class="line">//上传路径保存设置</span><br><span class="line">String path = request.getServletContext().getRealPath(&quot;/upload&quot;);</span><br><span class="line">File realPath = new File(path);</span><br><span class="line">if (!realPath.exists())&#123;</span><br><span class="line">realPath.mkdir();</span><br><span class="line">&#125;</span><br><span class="line">//上传文件地址</span><br><span class="line">System.out.println(&quot;上传文件保存地址：&quot;+realPath);</span><br><span class="line">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span><br><span class="line">file.transferTo(new File(realPath +&quot;/&quot;+ file.getOriginalFilename()));</span><br><span class="line">return &quot;redirect:/index.jsp&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p> 前端表单提交地址修改 </p></li><li><p> 访问提交测试，OK！ </p></li></ol><h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><p> <strong>文件下载步骤：</strong> </p><ol><li> 设置 response 响应头 </li><li> 读取文件 – InputStream </li><li> 写出文件 – OutputStream  </li><li> 执行操作 </li><li> 关闭流 （先开后关） </li></ol><p> <strong>代码实现：</strong> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value=&quot;/download&quot;)</span><br><span class="line">public String downloads(HttpServletResponse response ,HttpServletRequest request) throws</span><br><span class="line">Exception&#123;</span><br><span class="line">//要下载的图片地址</span><br><span class="line">String path = request.getServletContext().getRealPath(&quot;/upload&quot;);</span><br><span class="line">String fileName = &quot;基础语法.jpg&quot;;</span><br><span class="line">//1、设置response 响应头</span><br><span class="line">response.reset(); //设置页面不缓存,清空buffer</span><br><span class="line">response.setCharacterEncoding(&quot;UTF-8&quot;); //字符编码</span><br><span class="line">response.setContentType(&quot;multipart/form-data&quot;); //二进制传输数据</span><br><span class="line">//设置响应头</span><br><span class="line">response.setHeader(&quot;Content-Disposition&quot;,</span><br><span class="line">&quot;attachment;fileName=&quot;+URLEncoder.encode(fileName, &quot;UTF-8&quot;));</span><br><span class="line">File file = new File(path,fileName);</span><br><span class="line">//2、 读取文件--输入流</span><br><span class="line">InputStream input=new FileInputStream(file);</span><br><span class="line">//3、 写出文件--输出流</span><br><span class="line">OutputStream out = response.getOutputStream();</span><br><span class="line">byte[] buff =new byte[1024];</span><br><span class="line">int index=0;</span><br><span class="line">//4、执行 写出操作</span><br><span class="line">while((index= input.read(buff))!= -1)&#123;</span><br><span class="line">out.write(buff, 0, index);</span><br><span class="line">out.flush();</span><br><span class="line">&#125;</span><br><span class="line">out.close();</span><br><span class="line">input.close();</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 前端 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;/download&quot;&gt;点击下载&lt;/a&gt;</span><br></pre></td></tr></table></figure><p> 测试，文件下载OK，大家可以和我们之前学习的JavaWeb原生的方式对比一下，就可以知道这个便捷多了! </p><p><strong>结论：</strong></p><p> 拦截器及文件操作在我们开发中十分重要，一定要学会使用！ </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMvc的学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC-05：整合SSM框架</title>
      <link href="/2022/05/09/SpringMvc/SpringMVC-05%EF%BC%9A%E6%95%B4%E5%90%88SSM%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/05/09/SpringMvc/SpringMVC-05%EF%BC%9A%E6%95%B4%E5%90%88SSM%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SpringMVC-05：整合SSM框架"><a href="#SpringMVC-05：整合SSM框架" class="headerlink" title="SpringMVC-05：整合SSM框架"></a>SpringMVC-05：整合SSM框架</h1><h3 id="整合SSM"><a href="#整合SSM" class="headerlink" title="整合SSM"></a>整合SSM</h3><h4 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h4><p> 环境： IDEA 、MySQL 5.7.19 、Tomcat 9、 Maven 3.6  </p><p> 要求： 需要熟练掌握MySQL数据库，Spring，JavaWeb及MyBatis知识，简单的前端知识； </p><h4 id="数据库环境"><a href="#数据库环境" class="headerlink" title="数据库环境"></a>数据库环境</h4><p> 创建一个存放书籍数据的数据库表 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sql:</span><br><span class="line">CREATE DATABASE `ssmbuild`;</span><br><span class="line">USE `ssmbuild`;</span><br><span class="line">DROP TABLE IF EXISTS `books`;</span><br><span class="line">CREATE TABLE `books` (</span><br><span class="line">`bookID` INT(10) NOT NULL AUTO_INCREMENT COMMENT &#x27;书id&#x27;,</span><br><span class="line">`bookName` VARCHAR(100) NOT NULL COMMENT &#x27;书名&#x27;,</span><br><span class="line">`bookCounts` INT(11) NOT NULL COMMENT &#x27;数量&#x27;,</span><br><span class="line">`detail` VARCHAR(200) NOT NULL COMMENT &#x27;描述&#x27;,</span><br><span class="line">KEY `bookID` (`bookID`)</span><br><span class="line">) ENGINE=INNODB DEFAULT CHARSET=utf8</span><br><span class="line">INSERT INTO `books`(`bookID`,`bookName`,`bookCounts`,`detail`)VALUES</span><br><span class="line">(1,&#x27;Java&#x27;,1,&#x27;从入门到放弃&#x27;),</span><br><span class="line">(2,&#x27;MySQL&#x27;,10,&#x27;从删库到跑路&#x27;),</span><br><span class="line">(3,&#x27;Linux&#x27;,5,&#x27;从进门到进牢&#x27;);</span><br></pre></td></tr></table></figure><h4 id="基本环境搭建"><a href="#基本环境搭建" class="headerlink" title="基本环境搭建"></a>基本环境搭建</h4><ol><li><p> 新建一Maven项目！ssmbuild ， 添加web的支持 </p></li><li><p> 导入相关的pom依赖！ </p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;!--Junit--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--数据库驱动--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.1.47&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 数据库连接池 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.mchange&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.9.5.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--Servlet - JSP --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--Mybatis--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.5.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.0.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--Spring--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.1.9.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.1.9.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li> Maven资源过滤设置 </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">&lt;resource&gt;</span><br><span class="line">&lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">&lt;includes&gt;</span><br><span class="line">&lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">&lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">&lt;/includes&gt;</span><br><span class="line">&lt;filtering&gt;false&lt;/filtering&gt;</span><br><span class="line">&lt;/resource&gt;</span><br><span class="line">&lt;resource&gt;</span><br><span class="line">&lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">&lt;includes&gt;</span><br><span class="line">&lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">&lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">&lt;/includes&gt;</span><br><span class="line">&lt;filtering&gt;false&lt;/filtering&gt;</span><br><span class="line">&lt;/resource&gt;</span><br><span class="line">&lt;/resources&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li> 建立基本结构和配置框架！</li></ol><ul><li><p> com.kuang.pojo </p></li><li><p>com.kuang.dao </p></li><li><p>com.kuang.service </p></li><li><p>com.kuang.controller </p></li><li><p>mybatis-config.xml </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p> applicationContext.xml  </p></li></ul><pre><code> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure> </code></pre><h4 id="Mybatis层编写"><a href="#Mybatis层编写" class="headerlink" title="Mybatis层编写"></a>Mybatis层编写</h4><ol><li> 数据库配置文件 database.properties  </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?</span><br><span class="line">useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=root123</span><br></pre></td></tr></table></figure><ol start="2"><li><p> IDEA关联数据库  </p></li><li><p> 编写MyBatis的核心配置文件 </p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;typeAliases&gt;</span><br><span class="line">&lt;package name=&quot;com.kuang.pojo&quot;/&gt;</span><br><span class="line">&lt;/typeAliases&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">&lt;mapper resource=&quot;com/kuang/dao/BookMapper.xml&quot;/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>编写数据库对应的实体类 com.kuang.pojo.Books </p><p> 使用<strong>lombok</strong>插件！  </p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.kuang.pojo;</span><br><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.NoArgsConstructor;</span><br><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class Books &#123;</span><br><span class="line">private int bookID;</span><br><span class="line">private String bookName;</span><br><span class="line">private int bookCounts;</span><br><span class="line">private String detail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li> 编写Dao层的 Mapper接口！ </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.kuang.dao;</span><br><span class="line">import com.kuang.pojo.Books;</span><br><span class="line">import java.util.List;</span><br><span class="line">public interface BookMapper &#123;</span><br><span class="line">//增加一个Book</span><br><span class="line">int addBook(Books book);</span><br><span class="line">//根据id删除一个Book</span><br><span class="line">int deleteBookById(int id);</span><br><span class="line">//更新Book</span><br><span class="line">int updateBook(Books books);</span><br><span class="line">//根据id查询,返回一个Book</span><br><span class="line">Books queryBookById(int id);</span><br><span class="line">//查询全部Book,返回list集合</span><br><span class="line">List&lt;Books&gt; queryAllBook();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li> 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包； </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;!-- 导入Mapper！！！！！！！！！！！！！！！！！！！！！！！！ --&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.kuang.dao.BookMapper&quot;&gt;</span><br><span class="line">&lt;!--增加一个Book--&gt;</span><br><span class="line">&lt;insert id=&quot;addBook&quot; parameterType=&quot;Books&quot;&gt;</span><br><span class="line">insert into ssmbuild.books(bookName,bookCounts,detail)</span><br><span class="line">values (#&#123;bookName&#125;, #&#123;bookCounts&#125;, #&#123;detail&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br><span class="line">&lt;!--根据id删除一个Book--&gt;</span><br><span class="line">&lt;delete id=&quot;deleteBookById&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">delete from ssmbuild.books where bookID=#&#123;bookID&#125;</span><br><span class="line">&lt;/delete&gt;</span><br><span class="line">&lt;!--更新Book--&gt;</span><br><span class="line">&lt;update id=&quot;updateBook&quot; parameterType=&quot;Books&quot;&gt;</span><br><span class="line">update ssmbuild.books</span><br><span class="line">set bookName = #&#123;bookName&#125;,bookCounts = #&#123;bookCounts&#125;,detail = #&#123;detail&#125;</span><br><span class="line">where bookID = #&#123;bookID&#125;</span><br><span class="line">&lt;/update&gt;</span><br><span class="line">&lt;!--根据id查询,返回一个Book--&gt;</span><br><span class="line">&lt;select id=&quot;queryBookById&quot; resultType=&quot;Books&quot;&gt;</span><br><span class="line">select * from ssmbuild.books</span><br><span class="line">where bookID = #&#123;bookID&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;!--查询全部Book--&gt;</span><br><span class="line">&lt;select id=&quot;queryAllBook&quot; resultType=&quot;Books&quot;&gt;</span><br><span class="line">SELECT * from ssmbuild.books</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><ol start="7"><li> 编写Service层的接口和实现类 </li></ol><p>   接口：</p>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.kuang.service;</span><br><span class="line">import com.kuang.pojo.Books;</span><br><span class="line">import java.util.List;</span><br><span class="line">//BookService:底下需要去实现,调用dao层</span><br><span class="line">public interface BookService &#123;</span><br><span class="line">//增加一个Book</span><br><span class="line">int addBook(Books book);</span><br><span class="line">//根据id删除一个Book</span><br><span class="line">int deleteBookById(int id);</span><br><span class="line">//更新Book</span><br><span class="line">int updateBook(Books books);</span><br><span class="line">//根据id查询,返回一个Book</span><br><span class="line">Books queryBookById(int id);</span><br><span class="line">//查询全部Book,返回list集合</span><br><span class="line">List&lt;Books&gt; queryAllBook();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   实现类：</p>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.kuang.service;</span><br><span class="line">import com.kuang.dao.BookMapper;</span><br><span class="line">import com.kuang.pojo.Books;</span><br><span class="line">import java.util.List;</span><br><span class="line">public class BookServiceImpl implements BookService &#123;</span><br><span class="line">//调用dao层的操作，设置一个set接口，方便Spring管理</span><br><span class="line">private BookMapper bookMapper;</span><br><span class="line">public void setBookMapper(BookMapper bookMapper) &#123;</span><br><span class="line">this.bookMapper = bookMapper;</span><br><span class="line">&#125;</span><br><span class="line">public int addBook(Books book) &#123;</span><br><span class="line">return bookMapper.addBook(book);</span><br><span class="line">&#125;</span><br><span class="line">public int deleteBookById(int id) &#123;</span><br><span class="line">return bookMapper.deleteBookById(id);</span><br><span class="line">&#125;</span><br><span class="line">public int updateBook(Books books) &#123;</span><br><span class="line">return bookMapper.updateBook(books);</span><br><span class="line">&#125;</span><br><span class="line">public Books queryBookById(int id) &#123;</span><br><span class="line">return bookMapper.queryBookById(id);</span><br><span class="line">&#125;</span><br><span class="line">public List&lt;Books&gt; queryAllBook() &#123;</span><br><span class="line">return bookMapper.queryAllBook();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Spring层"><a href="#Spring层" class="headerlink" title="Spring层"></a>Spring层</h4><ol><li><p> 配置Spring整合MyBatis，我们这里数据源使用c3p0连接池； </p></li><li><p> 我们去编写Spring整合Mybatis的相关的配置文件；spring-dao.xml </p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">http://www.springframework.org/schema/context</span><br><span class="line">https://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line">&lt;!-- 配置整合mybatis --&gt;</span><br><span class="line">&lt;!-- 1.关联数据库文件 --&gt;</span><br><span class="line">&lt;context:property-placeholder location=&quot;classpath:database.properties&quot;/&gt;</span><br><span class="line">&lt;!-- 2.数据库连接池 --&gt;</span><br><span class="line">&lt;!--数据库连接池</span><br><span class="line">dbcp 半自动化操作 不能自动连接</span><br><span class="line">c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）</span><br><span class="line">--&gt;</span><br><span class="line">&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="line">&lt;!-- 配置连接池属性 --&gt;</span><br><span class="line">&lt;property name=&quot;driverClass&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;jdbc.url&#125;&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;user&quot; value=&quot;$&#123;jdbc.username&#125;&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;/&gt;</span><br><span class="line">&lt;!-- c3p0连接池的私有属性 --&gt;</span><br><span class="line">&lt;property name=&quot;maxPoolSize&quot; value=&quot;30&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;minPoolSize&quot; value=&quot;10&quot;/&gt;</span><br><span class="line">&lt;!-- 关闭连接后不自动commit --&gt;</span><br><span class="line">&lt;property name=&quot;autoCommitOnClose&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">&lt;!-- 获取连接超时时间 --&gt;</span><br><span class="line">&lt;property name=&quot;checkoutTimeout&quot; value=&quot;10000&quot;/&gt;</span><br><span class="line">&lt;!-- 当获取连接失败重试次数 --&gt;</span><br><span class="line">&lt;property name=&quot;acquireRetryAttempts&quot; value=&quot;2&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span><br><span class="line">&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">&lt;!-- 注入数据库连接池 --&gt;</span><br><span class="line">&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span><br><span class="line">&lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span><br><span class="line">&lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span><br><span class="line">&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">&lt;!-- 注入sqlSessionFactory --&gt;</span><br><span class="line">&lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&gt;</span><br><span class="line">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span><br><span class="line">&lt;property name=&quot;basePackage&quot; value=&quot;com.kuang.dao&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li> Spring整合service层 </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">http://www.springframework.org/schema/context</span><br><span class="line">http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line">&lt;!-- 扫描service相关的bean --&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.kuang.service&quot; /&gt;</span><br><span class="line">&lt;!--BookServiceImpl注入到IOC容器中--&gt;</span><br><span class="line">&lt;bean id=&quot;BookServiceImpl&quot; class=&quot;com.kuang.service.BookServiceImpl&quot;&gt;</span><br><span class="line">&lt;property name=&quot;bookMapper&quot; ref=&quot;bookMapper&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 配置事务管理器 --&gt;</span><br><span class="line">&lt;bean id=&quot;transactionManager&quot;</span><br><span class="line">class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">&lt;!-- 注入数据库连接池 --&gt;</span><br><span class="line">&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h4 id="SpringMVC层"><a href="#SpringMVC层" class="headerlink" title="SpringMVC层"></a>SpringMVC层</h4><ol><li> web.xml </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee</span><br><span class="line">http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class="line">version=&quot;4.0&quot;&gt;</span><br><span class="line">&lt;!--DispatcherServlet--&gt;</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">&lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;</span><br><span class="line">&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">&lt;!--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--&gt;</span><br><span class="line">&lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">&lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;</span><br><span class="line">&lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line">&lt;!--encodingFilter--&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">&lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;</span><br><span class="line">&lt;filter-class&gt;</span><br><span class="line">org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">&lt;/filter-class&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">&lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;utf-8&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">&lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;</span><br><span class="line">&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">&lt;/filter-mapping&gt;</span><br><span class="line">&lt;!--Session过期时间--&gt;</span><br><span class="line">&lt;session-config&gt;</span><br><span class="line">&lt;session-timeout&gt;15&lt;/session-timeout&gt;</span><br><span class="line">&lt;/session-config&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li> spring-mvc.xml </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">http://www.springframework.org/schema/context</span><br><span class="line">http://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="line">http://www.springframework.org/schema/mvc</span><br><span class="line">https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;</span><br><span class="line">&lt;!-- 配置SpringMVC --&gt;</span><br><span class="line">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span><br><span class="line">&lt;mvc:annotation-driven /&gt;</span><br><span class="line">&lt;!-- 2.静态资源默认servlet配置--&gt;</span><br><span class="line">&lt;mvc:default-servlet-handler/&gt;</span><br><span class="line">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span><br><span class="line">&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">&lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 4.扫描web相关的bean --&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.kuang.controller&quot; /&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li> Spring配置整合文件，applicationContext.xml  </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line">&lt;import resource=&quot;spring-dao.xml&quot;/&gt;</span><br><span class="line">&lt;import resource=&quot;spring-service.xml&quot;/&gt;</span><br><span class="line">&lt;import resource=&quot;spring-mvc.xml&quot;/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p> 配置文件，暂时结束！Controller 和 视图层编写 </p><ol><li> BookController 类编写 ， 方法一：查询全部书籍 </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/book&quot;)</span><br><span class="line">public class BookController &#123;</span><br><span class="line">@Autowired</span><br><span class="line">@Qualifier(&quot;BookServiceImpl&quot;)</span><br><span class="line">private BookService bookService;</span><br><span class="line">@RequestMapping(&quot;/allBook&quot;)</span><br><span class="line">public String list(Model model) &#123;</span><br><span class="line">List&lt;Books&gt; list = bookService.queryAllBook();</span><br><span class="line">model.addAttribute(&quot;list&quot;, list);</span><br><span class="line">return &quot;allBook&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li> 编写首页 index.jsp </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; %&gt;</span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">a &#123;</span><br><span class="line">text-decoration: none;</span><br><span class="line">color: black;</span><br><span class="line">font-size: 18px;</span><br><span class="line">&#125;</span><br><span class="line">h3 &#123;</span><br><span class="line">width: 180px;</span><br><span class="line">height: 38px;</span><br><span class="line">margin: 100px auto;</span><br><span class="line">text-align: center;</span><br><span class="line">line-height: 38px;</span><br><span class="line">background: deepskyblue;</span><br><span class="line">border-radius: 4px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;</span><br><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/book/allBook&quot;&gt;点击进入列表页&lt;/a&gt;</span><br><span class="line">&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li> 书籍列表页面 allbook.jsp  </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;书籍列表&lt;/title&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">&lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">&lt;link href=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span><br><span class="line">rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">&lt;div class=&quot;row clearfix&quot;&gt;</span><br><span class="line">&lt;div class=&quot;col-md-12 column&quot;&gt;</span><br><span class="line">&lt;div class=&quot;page-header&quot;&gt;</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">&lt;small&gt;书籍列表 —— 显示所有书籍&lt;/small&gt;</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;row&quot;&gt;</span><br><span class="line">&lt;div class=&quot;col-md-4 column&quot;&gt;</span><br><span class="line">&lt;a class=&quot;btn btn-primary&quot;</span><br><span class="line">href=&quot;$&#123;pageContext.request.contextPath&#125;/book/toAddBook&quot;&gt;新增&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;row clearfix&quot;&gt;</span><br><span class="line">&lt;div class=&quot;col-md-12 column&quot;&gt;</span><br><span class="line">&lt;table class=&quot;table table-hover table-striped&quot;&gt;</span><br><span class="line">&lt;thead&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;th&gt;书籍编号&lt;/th&gt;</span><br><span class="line">&lt;th&gt;书籍名字&lt;/th&gt;</span><br><span class="line">&lt;th&gt;书籍数量&lt;/th&gt;</span><br><span class="line">&lt;th&gt;书籍详情&lt;/th&gt;</span><br><span class="line">&lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/thead&gt;</span><br><span class="line">&lt;tbody&gt;</span><br><span class="line">&lt;c:forEach var=&quot;book&quot; items=&quot;$&#123;requestScope.get(&#x27;list&#x27;)&#125;&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;$&#123;book.getBookID()&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;book.getBookName()&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;book.getBookCounts()&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;book.getDetail()&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/book/toUpdateBook?</span><br><span class="line">id=$&#123;book.getBookID()&#125;&quot;&gt;更改&lt;/a&gt; |</span><br><span class="line">&lt;a</span><br><span class="line">href=&quot;$&#123;pageContext.request.contextPath&#125;/book/del/$&#123;book.getBookID()&#125;&quot;&gt;删除&lt;/a&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li> BookController 类编写 ， 方法二：添加书籍 </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/toAddBook&quot;)</span><br><span class="line">public String toAddPaper() &#123;</span><br><span class="line">return &quot;addBook&quot;;</span><br><span class="line">&#125;</span><br><span class="line">@RequestMapping(&quot;/addBook&quot;)</span><br><span class="line">public String addPaper(Books books) &#123;</span><br><span class="line">System.out.println(books);</span><br><span class="line">bookService.addBook(books);</span><br><span class="line">return &quot;redirect:/book/allBook&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li> 添加书籍页面：addBook.jsp </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;新增书籍&lt;/title&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">&lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">&lt;link href=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span><br><span class="line">rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">&lt;div class=&quot;row clearfix&quot;&gt;</span><br><span class="line">&lt;div class=&quot;col-md-12 column&quot;&gt;</span><br><span class="line">&lt;div class=&quot;page-header&quot;&gt;</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">&lt;small&gt;新增书籍&lt;/small&gt;</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/book/addBook&quot; method=&quot;post&quot;&gt;</span><br><span class="line">书籍名称：&lt;input type=&quot;text&quot; name=&quot;bookName&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">书籍数量：&lt;input type=&quot;text&quot; name=&quot;bookCounts&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">书籍详情：&lt;input type=&quot;text&quot; name=&quot;detail&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;添加&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li> BookController 类编写 ， 方法三：修改书籍  </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/toUpdateBook&quot;)</span><br><span class="line">public String toUpdateBook(Model model, int id) &#123;</span><br><span class="line">Books books = bookService.queryBookById(id);</span><br><span class="line">System.out.println(books);</span><br><span class="line">model.addAttribute(&quot;book&quot;,books );</span><br><span class="line">return &quot;updateBook&quot;;</span><br><span class="line">&#125;</span><br><span class="line">@RequestMapping(&quot;/updateBook&quot;)</span><br><span class="line">public String updateBook(Model model, Books book) &#123;</span><br><span class="line">System.out.println(book);</span><br><span class="line">bookService.updateBook(book);</span><br><span class="line">Books books = bookService.queryBookById(book.getBookID());</span><br><span class="line">model.addAttribute(&quot;books&quot;, books);</span><br><span class="line">return &quot;redirect:/book/allBook&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li> 修改书籍页面 updateBook.jsp  </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;修改信息&lt;/title&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">&lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">&lt;link href=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span><br><span class="line">rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">&lt;div class=&quot;row clearfix&quot;&gt;</span><br><span class="line">&lt;div class=&quot;col-md-12 column&quot;&gt;</span><br><span class="line">&lt;div class=&quot;page-header&quot;&gt;</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">&lt;small&gt;修改信息&lt;/small&gt;</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/book/updateBook&quot; method=&quot;post&quot;&gt;</span><br><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;bookID&quot; value=&quot;$&#123;book.getBookID()&#125;&quot;/&gt;</span><br><span class="line">书籍名称：&lt;input type=&quot;text&quot; name=&quot;bookName&quot; value=&quot;$&#123;book.getBookName()&#125;&quot;/&gt;</span><br><span class="line">书籍数量：&lt;input type=&quot;text&quot; name=&quot;bookCounts&quot; value=&quot;$&#123;book.getBookCounts()&#125;&quot;/&gt;</span><br><span class="line">书籍详情：&lt;input type=&quot;text&quot; name=&quot;detail&quot; value=&quot;$&#123;book.getDetail() &#125;&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="8"><li> BookController 类编写 ， 方法四：删除书籍 </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/del/&#123;bookId&#125;&quot;)</span><br><span class="line">public String deleteBook(@PathVariable(&quot;bookId&quot;) int id) &#123;</span><br><span class="line">bookService.deleteBookById(id);</span><br><span class="line">return &quot;redirect:/book/allBook&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 配置Tomcat，进行运行！ </p><p>到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需 要保证，不看任何东西，自己也可以完整的实现出来！ 项目结构图  </p><p><img src="https://s1.ax1x.com/2022/06/22/j9YbQJ.png" alt="1655887958255"></p><p><strong>结论：</strong></p><p>​         SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改 查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的 底线。 </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMvc的学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC-01：什么是SpringMVC</title>
      <link href="/2022/05/09/SpringMvc/SpringMVC-01%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AFSpringMVC/"/>
      <url>/2022/05/09/SpringMvc/SpringMVC-01%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AFSpringMVC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SpringMVC-01：什么是SpringMVC"><a href="#SpringMVC-01：什么是SpringMVC" class="headerlink" title="SpringMVC-01：什么是SpringMVC"></a>SpringMVC-01：什么是SpringMVC</h1><h3 id="1、回顾MVC"><a href="#1、回顾MVC" class="headerlink" title="1、回顾MVC"></a>1、回顾MVC</h3><h4 id="1-1、什么是MVC"><a href="#1-1、什么是MVC" class="headerlink" title="1.1、什么是MVC"></a>1.1、什么是MVC</h4><ul><li> MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。 </li><li> 是将业务逻辑、数据、显示分离的方法来组织代码。 </li><li> MVC主要作用是降低了视图与业务逻辑间的双向偶合。 </li><li> MVC不是一种设计模式，MVC是一种架构模式。当然不同的MVC存在差异。 </li></ul><p> <strong>Model（模型）</strong>：数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean 组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为 Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。 </p><p> <strong>View（视图）</strong>：负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。 </p><p> <strong>Controller（控制器）</strong>：接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数 据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。 </p><p> <strong>最典型的MVC就是  JSP + servlet + javabean的模式。</strong> </p><p><img src="https://s1.ax1x.com/2022/06/22/j9YgMj.png"></p><h4 id="1-2、Model1时代"><a href="#1-2、Model1时代" class="headerlink" title="1.2、Model1时代"></a>1.2、Model1时代</h4><ul><li><p> 在web早期的开发中，通常采用的都是Model1。 </p></li><li><p> Model1中，主要分为两层，视图层和模型层。 </p></li></ul><p>  <img src="https://s1.ax1x.com/2022/06/22/j9Y6zQ.png" alt="1655880119322"></p><p> Model1优点：架构简单，比较适合小型项目开发； </p><p> Model1缺点：JSP职责不单一，职责过重，不便于维护； </p><h4 id="1-3、Model2时代"><a href="#1-3、Model2时代" class="headerlink" title="1.3、Model2时代"></a>1.3、Model2时代</h4><p> Model2把一个项目分成三部分，包括视图、控制、模型。 </p><p><img src="https://s1.ax1x.com/2022/06/22/j9YyRg.png" alt="1655880153971"></p><ol><li> 用户发请求 </li><li> Servlet接收请求数据，并调用对应的业务逻辑方法 </li><li>  业务处理完毕，返回更新后的数据给servlet  </li><li> servlet转向到JSP，由JSP来渲染页面 </li><li> 响应给前端更新后的页面  </li></ol><p> <strong>职责分析：</strong>  </p><p> <strong>Controller：控制器</strong>  </p><ol><li> 取得表单数据  </li><li> 调用业务逻辑 </li><li> 转向指定的页面  </li></ol><p> <strong>Model：模型</strong> </p><ol><li>  业务逻辑 </li><li> 保存数据的状态 </li></ol><p> <strong>View：视图</strong> </p><ol><li>显示页面 </li></ol><p><strong>结论：</strong></p><p> Model2这样不仅提高的代码的复用率与项目的扩展性，且大大降低了项目的维护成本。Model 1模式的实现 比较简单，适用于快速开发小规模项目，Model1中JSP页面身兼View和Controller两种角色，将控制逻辑和 表现逻辑混杂在一起，从而导致代码的重用性非常低，增加了应用的扩展性和维护的难度。Model2消除了 Model1的缺点。  </p><h4 id="1-4、回顾Servlet"><a href="#1-4、回顾Servlet" class="headerlink" title="1.4、回顾Servlet"></a>1.4、回顾Servlet</h4><ol><li> 新建一个Maven工程当做父工程！pom依赖！  </li></ol>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">4.12</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">5.1</span><span class="number">.9</span>.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">2.5</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">2.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">1.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li><p> 建立一个Moudle：springmvc-01-servlet ， 添加Web app的支持！ </p></li><li><p> 导入servlet 和 jsp 的 jar 依赖 </p></li></ol>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">2.5</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">2.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li> 编写一个Servlet类，用来处理用户的请求  (重写 doGet( )  、doPost( ) 方法)</li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.kuang.servlet;</span><br><span class="line">//实现Servlet接口</span><br><span class="line">public class HelloServlet extends HttpServlet &#123;</span><br><span class="line">@Override</span><br><span class="line">protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws</span><br><span class="line">ServletException, IOException &#123;</span><br><span class="line">//取得参数</span><br><span class="line">String method = req.getParameter(&quot;method&quot;);</span><br><span class="line">if (method.equals(&quot;add&quot;))&#123;</span><br><span class="line">req.getSession().setAttribute(&quot;msg&quot;,&quot;执行了add方法&quot;);</span><br><span class="line">&#125;</span><br><span class="line">if (method.equals(&quot;delete&quot;))&#123;</span><br><span class="line">req.getSession().setAttribute(&quot;msg&quot;,&quot;执行了delete方法&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//业务逻辑</span><br><span class="line">//视图跳转</span><br><span class="line">req.getRequestDispatcher(&quot;/WEB-INF/jsp/hello.jsp&quot;).forward(req,resp);</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws</span><br><span class="line">ServletException, IOException &#123;</span><br><span class="line">doGet(req,resp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li> 编写Hello.jsp，在WEB-INF目录下新建一个jsp的文件夹，新建hello.jsp </li></ol>   <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Kuangshen<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li> 在web.xml中注册Servlet </li></ol>   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/user<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="7"><li> 配置Tomcat，并启动测试  </li></ol><ul><li> localhost:8080/user?method=add</li><li>  localhost:8080/user?method=delete </li></ul><p> <strong>MVC框架要做哪些事情</strong> </p><ol><li> 将url映射到java类或java类的方法  </li><li> 封装用户提交的数据 .  </li><li> 处理请求–调用相关的业务处理–封装响应数据  </li><li> 将响应的数据进行渲染 . jsp / html 等表示层数据 </li></ol><p><strong>说明：</strong></p><p> <strong>常见的服务器端MVC框架</strong>有：Struts、Spring MVC、ASP.NET MVC、Zend Framework、JSF；<strong>常见前端MVC框架</strong>：vue、angularjs、react、backbone；由MVC演化出了另外一些模式如：MVP、MVVM 等等….  </p><h3 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h3><h4 id="2-1、概述"><a href="#2-1、概述" class="headerlink" title="2.1、概述"></a>2.1、概述</h4><p> <strong>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</strong> </p><p>查看官方文档：<a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spri">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spri</a> ng-web </p><p>SpringMvc有什么魔力呢？</p><p> Spring MVC的特点：  </p><ol><li> 轻量级，简单易学 </li><li> 高效 , 基于请求响应的MVC框架 </li><li> 与Spring兼容性好，无缝结合 </li><li> 约定优于配置 </li><li> 功能强大：RESTful、数据验证、格式化、本地化、主题等 </li><li> 简洁灵活  </li></ol><p> Spring的web框架围绕DispatcherServlet [ 调度Servlet ] 设计。 </p><p> DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户 可以采用<strong>基于注解形式进行开发</strong>，十分简洁；  </p><p> 正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和Aop) , 使用约定优于配置 . 能够进行简单的junit测试 . 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦截器 等 等……所以我们要学习 .  </p><h4 id="2-2、中心控制器"><a href="#2-2、中心控制器" class="headerlink" title="2.2、中心控制器"></a>2.2、中心控制器</h4><p> Spring的web框架围绕DispatcherServlet设计。DispatcherServlet的作用是将请求分发到不同的处理器。 从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的controller声明方式。 </p><p>Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动 , 围绕一个中心Servlet分派请求及提供 其他功能，DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)。</strong> </p><p><img src="https://s1.ax1x.com/2022/06/22/j9Yri8.png" alt="1655880929885"></p><p> SpringMVC的原理如下图所示：  </p><pre><code>     当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器， 控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图 结果，将结果返回给中心控制器，再将结果返回给请求者。  </code></pre><p><img src="https://s1.ax1x.com/2022/06/22/j9YsJS.png" alt="1655880974212"></p><h4 id="2-3、SpringMVC执行原理"><a href="#2-3、SpringMVC执行原理" class="headerlink" title="2.3、SpringMVC执行原理"></a>2.3、SpringMVC执行原理</h4><p><img src="https://s1.ax1x.com/2022/06/22/j9Yhd0.png" alt="1655880990430"></p><p> 图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线 表示需要开发者实现。  </p><p> <strong>简要分析执行流程</strong> </p><ol><li><p>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet 接收请求并拦截请求。 </p><p> 我们假设请求的url为 : <a href="http://localhost:8080/SpringMVC/hello">http://localhost:8080/SpringMVC/hello</a> </p><p> 如上url拆分成三部分：  </p><p> <a href="http://localhost:8080服务器域名">http://localhost:8080服务器域名</a> </p></li></ol><p>   SpringMVC部署在服务器上的web站点 </p><p>   hello表示控制器 </p><p>   通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。 </p><ol start="2"><li><p>  HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查 找Handler。 </p></li><li><p>  HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。 </p></li><li><p> HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。  </p></li><li><p> HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。 </p></li><li><p> Handler让具体的Controller执行。 </p></li><li><p> Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。 </p></li><li><p> HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。 </p></li><li><p> DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。 </p></li><li><p> 视图解析器将解析的逻辑视图名传给DispatcherServlet。 </p></li><li><p>  DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。 </p></li><li><p> 最终视图呈现给用户。 </p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMvc的学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC-02：第一个MVC程序</title>
      <link href="/2022/05/09/SpringMvc/SpringMVC-02%EF%BC%9A%E7%AC%AC%E4%B8%80%E4%B8%AAMVC%E7%A8%8B%E5%BA%8F/"/>
      <url>/2022/05/09/SpringMvc/SpringMVC-02%EF%BC%9A%E7%AC%AC%E4%B8%80%E4%B8%AAMVC%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SpringMVC-02：第一个MVC程序"><a href="#SpringMVC-02：第一个MVC程序" class="headerlink" title="SpringMVC-02：第一个MVC程序"></a>SpringMVC-02：第一个MVC程序</h1><p>根据步骤，试着搭建一个SpringMvc程序样例</p><p> <strong>配置版</strong> </p><ol><li><p> 新建一个Moudle ， springmvc-02-hello ， 添加web的支持！ </p></li><li><p> 确定导入了SpringMVC 的依赖！ </p></li><li><p> 配置web.xml ， 注册<strong>DispatcherServlet</strong>  </p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/</span><br><span class="line">xml/ns/javaee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns</span><br><span class="line">.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot; version=&quot;4.0&quot;&gt;</span><br><span class="line">&lt;!--1.注册DispatcherServlet--&gt; </span><br><span class="line">&lt;servlet&gt; &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; </span><br><span class="line">&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; </span><br><span class="line">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt; </span><br><span class="line">&lt;init-param&gt; </span><br><span class="line">&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; </span><br><span class="line">&lt;param-value&gt;classpath:springmvc-servlet.xml&lt;/param-value&gt; </span><br><span class="line">&lt;/init-param&gt; </span><br><span class="line">&lt;!--启动级别-1--&gt; </span><br><span class="line">&lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt;</span><br><span class="line">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt; </span><br><span class="line">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span><br><span class="line">&lt;servlet-mapping&gt; </span><br><span class="line">&lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; </span><br><span class="line">&lt;url-pattern&gt;/&lt;/url-pattern&gt; </span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li> 编写SpringMVC 的 配置文件！名称：<strong>springmvc-servlet.xml</strong> : [servletname]-servlet.xml 说明，这里的名称要求是按照官方来的 </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li> 添加 处理映射器 </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean class=&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;/&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li> 添加 处理器适配器  </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean class=&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;/&gt;</span><br></pre></td></tr></table></figure><ol start="7"><li> 添加 视图解析器  </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span><br><span class="line">&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;id=&quot;InternalResourceViewResolver&quot;&gt; </span><br><span class="line">&lt;!--前缀--&gt; </span><br><span class="line">&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;/&gt; </span><br><span class="line">&lt;!--后缀--&gt; </span><br><span class="line">&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><ol start="8"><li> 、编写我们要操作业务Controller ，要么实现Controller接口，要么增加注解；需要返回一个 ModelAndView，装数据，封视图；  </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.kuang.controller;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;import org.springframew</span><br><span class="line">ork.web.servlet.mvc.Controller;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;import javax.servlet.http.Http</span><br><span class="line">ServletResponse;</span><br><span class="line">//注意：这里我们先导入Controller接口</span><br><span class="line">public class HelloController implements Controller &#123;</span><br><span class="line">public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception &#123; </span><br><span class="line">//ModelAndView 模型和视图</span><br><span class="line">ModelAndView mv = new ModelAndView();</span><br><span class="line">//封装对象，放在ModelAndView中。</span><br><span class="line">Model mv.addObject(&quot;msg&quot;,&quot;HelloSpringMVC!&quot;); </span><br><span class="line">//封装要跳转的视图，放在ModelAndView中 </span><br><span class="line">mv.setViewName(&quot;hello&quot;); </span><br><span class="line">//: /WEB-INF/jsp/hello.jsp return mv; &#125; &#125;</span><br></pre></td></tr></table></figure><ol start="9"><li> 将自己的类交给SpringIOC容器，注册bean  </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--Handler--&gt;&lt;bean id=&quot;/hello&quot; class=&quot;com.kuang.controller.HelloController&quot;/&gt;</span><br></pre></td></tr></table></figure><ol start="10"><li> 写要跳转的jsp页面，显示ModelandView存放的数据，以及我们的正常页面； </li></ol><pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt; </span><br><span class="line">&lt;title&gt;Kuangshen&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;$&#123;msg&#125;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure></code></pre><ol start="11"><li> 配置Tomcat 启动测试！ </li></ol><pre><code>![1655881873735](https://s1.ax1x.com/2022/06/22/j9Y2ss.png)</code></pre><p> 小结：看这个估计大部分同学都能理解其中的原理了，<strong>但是我们实际开发才不会这么写</strong>，不然就疯了，还学 这个玩意干嘛！我们来看个注解版实现，这才是SpringMVC的精髓，到底有多么简单，看这个图就知道了。  </p><p> <strong>注解版</strong> </p><ol><li><p> 新建一个Moudle，springmvc-03-hello-annotation 。添加web支持！ </p></li><li><p> 由于Maven可能存在资源过滤的问题，我们将配置完善  </p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;build&gt; </span><br><span class="line">&lt;resources&gt; </span><br><span class="line">&lt;resource&gt; </span><br><span class="line">&lt;directory&gt;src/main/java&lt;/directory&gt; </span><br><span class="line">&lt;includes&gt; </span><br><span class="line">&lt;include&gt;**/*.properties&lt;/include&gt; </span><br><span class="line">&lt;include&gt;**/*.xml&lt;/include&gt; </span><br><span class="line">&lt;/includes&gt;</span><br><span class="line">&lt;filtering&gt;false&lt;/filtering&gt; </span><br><span class="line">&lt;/resource&gt; </span><br><span class="line"></span><br><span class="line">&lt;resource&gt;</span><br><span class="line">&lt;directory&gt;src/main/resources&lt;/directory&gt; </span><br><span class="line">&lt;includes&gt;</span><br><span class="line">&lt;include&gt;**/*.properties&lt;/include&gt; </span><br><span class="line">&lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; </span><br><span class="line">&lt;filtering&gt;false&lt;/filtering&gt;</span><br><span class="line">&lt;/resource&gt; </span><br><span class="line">&lt;/resources&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li><p> 在<strong>pom.xml文件引入相关的依赖</strong>：主要有<strong>Spring框架核心库、Spring MVC、servlet , JSTL</strong>等。我们在 父依赖中已经引入了！ </p></li><li><p><strong>配置web.xml</strong> </p><p> 注意点： </p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns</span><br><span class="line">.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot; version=&quot;4.0&quot;&gt;</span><br><span class="line">&lt;!--1.注册servlet--&gt; </span><br><span class="line">&lt;servlet&gt; &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt; </span><br><span class="line">&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;!--2、通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span><br><span class="line">&lt;init-param&gt; </span><br><span class="line">&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;classpath:springmvc-servlet.xml&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt; </span><br><span class="line">&lt;!--3、启动顺序，数字越小，启动越早 --&gt; </span><br><span class="line">&lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt;</span><br><span class="line">&lt;!--4、所有请求都会被springmvc拦截 --&gt; </span><br><span class="line">&lt;servlet-mapping&gt; </span><br><span class="line">&lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt; </span><br><span class="line">&lt;url-pattern&gt;/&lt;/url-pattern&gt; </span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><pre><code>/ 和 /* 的区别：&lt; url-pattern &gt; /  不会匹配到.jsp， 只针对我们编写的请求；即：.jsp 不会进入spring的 DispatcherServlet类 。&lt; url-pattern &gt; /*  会匹配 *.jsp，会出现返回 jsp视图 时再次进入spring的DispatcherServlet 类，导致找不到对应的controller所以报404错。  </code></pre><ul><li> 注意web.xml版本问题，要最新版！ </li><li> 注册DispatcherServlet </li><li> 关联SpringMVC的配置文件 </li><li> 启动级别为1 </li><li> 映射路径为 / 【不要用/*，会404】 </li></ul><ol start="5"><li><p>添加Spring MVC配置文件  </p><p> 在resource目录下添加springmvc-servlet.xml配置文件，配置的形式与Spring容 器配置基本类似，为了支持基于注解的IOC，设置了自动扫描包的功能，具体 配置信息如下：  </p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvchttps://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;</span><br><span class="line">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.kuang.controller&quot;/&gt; </span><br><span class="line">&lt;!-- 让Spring MVC不处理静态资源 --&gt; </span><br><span class="line">&lt;mvc:default-servlet-handler /&gt; </span><br><span class="line">&lt;!-- 支持mvc注解驱动在spring中一般采用@RequestMapping注解来完成映射关系 要想@RequestMapping注解生效 必须向上下文中注册DefaultAnnotationHandlerMapping 和一个AnnotationMethodHandlerAdapter实例 这两个实例分别在类级别和方法级别处理。而annotation-driven配置帮助我们自动完成上述两个实例的注入。-&gt; </span><br><span class="line">&lt;mvc:annotation-driven /&gt;</span><br><span class="line">&lt;!-- 视图解析器 --&gt; </span><br><span class="line">&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;id=&quot;internalResourceViewResolver&quot;&gt; </span><br><span class="line">&lt;!-- 前缀 --&gt; </span><br><span class="line">&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;/&gt; </span><br><span class="line">&lt;!-- 后缀 --&gt; </span><br><span class="line">&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt; </span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><pre><code>在视图解析器中我们把所有的视图都存放在/WEB-INF/目录下，这样可以保证 视图安全，因为这个目录下的文件，客户端不能直接访问。 </code></pre><ul><li> 让IOC的注解生效 </li><li> 静态资源过滤 ：HTML . JS . CSS . 图片 ， 视频 …..  </li><li> MVC的注解驱动  </li><li> 配置视图解析器 </li></ul><ol start="6"><li><p>创建Controller </p><p> 编写一个Java控制类：com.kuang.controller.HelloController , 注意编码规范 </p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.kuang.controller;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/HelloController&quot;)</span><br><span class="line">public class HelloController &#123;</span><br><span class="line">//真实访问地址 : 项目名/HelloController/hello </span><br><span class="line">@RequestMapping(&quot;/hello&quot;) </span><br><span class="line">public String sayHello(Model model)&#123; </span><br><span class="line">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span><br><span class="line">model.addAttribute(&quot;msg&quot;,&quot;hello,SpringMVC&quot;);</span><br><span class="line">//web-inf/jsp/hello.jsp return &quot;hello&quot;; </span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li> @Controller是为了让Spring IOC容器初始化时自动扫描到； </li><li> @RequestMapping是为了映射请求路径，这里因为类与方法上都有映射 所以访问时应该是/HelloController/hello；  </li><li> 方法中声明Model类型的参数是为了把Action中的数据带到视图中； </li><li> 方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEBINF/jsp/hello.jsp。 </li></ul><ol start="7"><li><p>创建视图层 </p><p> 在WEB-INF/ jsp目录中创建hello.jsp ， 视图可以直接取出并展示从Controller带 回的信息； 可以通过EL表示取出Model中存放的值，或者对象； </p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;&lt;head&gt; </span><br><span class="line">&lt;title&gt;SpringMVC&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;$&#123;msg&#125;&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="8"><li><p>配置Tomcat运行 </p><p> 配置Tomcat ， 开启服务器 ， 访问 对应的请求路径！ </p></li></ol><p>   <img src="https://s1.ax1x.com/2022/06/22/j9YfZq.png" alt="1655882565640"></p><p><strong>结论：</strong></p><p> 实现步骤其实非常的简单： </p><ol><li> 新建一个web项目  </li><li> 导入相关jar包 </li><li> 编写web.xml , 注册DispatcherServlet  </li><li> 编写springmvc配置文件 </li><li>  接下来就是去创建对应的控制类 , controller </li><li> 最后完善前端视图和controller之间的对应 </li><li> 测试运行调试 </li></ol><p> 使用springMVC必须配置的三大件： </p><p>处理器映射器、处理器适配器、视图解析器 </p><p><strong>通常，我们只需要手动配置视图解析器，而处理器映射器和处理器适配器只需要开启注解驱动即可， 而省去了大段的xml配置</strong> </p><p><img src="https://s1.ax1x.com/2022/06/22/j9Yhd0.png" alt="1655880990430"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMvc的学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC-03：RestFul和控制器</title>
      <link href="/2022/05/09/SpringMvc/SpringMVC-03%EF%BC%9ARestFul%E5%92%8C%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
      <url>/2022/05/09/SpringMvc/SpringMVC-03%EF%BC%9ARestFul%E5%92%8C%E6%8E%A7%E5%88%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SpringMVC-03：RestFul和控制器"><a href="#SpringMVC-03：RestFul和控制器" class="headerlink" title="SpringMVC-03：RestFul和控制器"></a>SpringMVC-03：RestFul和控制器</h1><h3 id="控制器Controller"><a href="#控制器Controller" class="headerlink" title="控制器Controller"></a>控制器Controller</h3><ul><li> 控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。 </li><li> 控制器负责解析用户的请求并将其转换为一个模型。 </li><li> 在Spring MVC中一个控制器类可以包含多个方法 </li><li> 在Spring MVC中，对于Controller的配置方式有很多种 </li></ul><h4 id="实现Controller接口"><a href="#实现Controller接口" class="headerlink" title="实现Controller接口"></a>实现Controller接口</h4><p> Controller是一个接口，在org.springframework.web.servlet.mvc包下，接口中只有一个方法； </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//实现该接口的类获得控制器功能</span><br><span class="line">public interface Controller &#123;</span><br><span class="line">//处理请求且返回一个模型与视图对象</span><br><span class="line">ModelAndView handleRequest(HttpServletRequest var1, HttpServletResponse var2) throws</span><br><span class="line">Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>测试</strong> </p><ol><li> 新建一个Moudle，springmvc-04-controller 。将刚才的03 拷贝一份, 我们进行操作！ </li></ol><ul><li> 删掉HelloController </li><li> mvc的配置文件只留下 视图解析器！ </li></ul><ol start="2"><li> 编写一个Controller类，ControllerTest1  </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//定义控制器</span><br><span class="line">//注意点：不要导错包，实现Controller接口，重写方法；</span><br><span class="line">public class ControllerTest1 implements Controller &#123;</span><br><span class="line">public ModelAndView handleRequest(HttpServletRequest httpServletRequest,</span><br><span class="line">HttpServletResponse httpServletResponse) throws Exception &#123;</span><br><span class="line">//返回一个模型视图对象</span><br><span class="line">ModelAndView mv = new ModelAndView();</span><br><span class="line">mv.addObject(&quot;msg&quot;,&quot;Test1Controller&quot;);</span><br><span class="line">mv.setViewName(&quot;test&quot;);</span><br><span class="line">return mv;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>  编写完毕后，去Spring配置文件中注册请求的bean；name对应请求路径，class对应处理请求的类 </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean name=&quot;/t1&quot; class=&quot;com.kuang.controller.ControllerTest1&quot;/&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li> 编写前端test.jsp，注意在WEB-INF/jsp目录下编写，对应我们的视图解析器 </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Kuangshen&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li> 配置Tomcat运行测试，我这里没有项目发布名配置的就是一个 / ，所以请求不用加项目名，OK！ </li></ol><p>   <img src="https://s1.ax1x.com/2022/06/22/j9YRLn.png" alt="1655882926231"></p><p> <strong>说明：</strong> </p><ul><li> 实现接口Controller定义控制器是较老的办法 </li><li> 缺点是：一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻 烦； </li></ul><h4 id="使用注解-Controller-！！！！！"><a href="#使用注解-Controller-！！！！！" class="headerlink" title="使用注解@Controller ！！！！！"></a>使用注解@Controller ！！！！！</h4><ul><li><p> @Controller注解类型用于声明Spring类的实例是一个控制器（在讲IOC时还提到了另外3个注解）；  </p></li><li><p> Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制 器，需要在配置文件中声明组件扫描。 </p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.kuang.controller&quot;/&gt;</span><br></pre></td></tr></table></figure><ul><li> 增加一个ControllerTest2类，使用注解实现； </li></ul>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//@Controller注解的类会自动添加到Spring上下文中</span><br><span class="line">@Controller</span><br><span class="line">public class ControllerTest2&#123;</span><br><span class="line">//映射访问路径</span><br><span class="line">@RequestMapping(&quot;/t2&quot;)</span><br><span class="line">public String index(Model model)&#123;</span><br><span class="line">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span><br><span class="line">model.addAttribute(&quot;msg&quot;, &quot;ControllerTest2&quot;);</span><br><span class="line">//返回视图位置</span><br><span class="line">return &quot;test&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li> 运行tomcat测试  </li></ul><p>  <img src="https://s1.ax1x.com/2022/06/22/j9Y4oV.png" alt="1655883107822"></p><p> <strong>可以发现，我们的两个请求都可以指向一个视图，但是页面结果的结果是不一样的，从这里可以看出 视图是被复用的，而控制器与视图之间是弱偶合关系。</strong>  <strong>注解方式是平时使用的最多的方式！</strong> </p><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h3><h4 id="RequestMapping-1"><a href="#RequestMapping-1" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h4><ul><li><p> @RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法。可用于类或方法上。用于 类上，表示类中的所有响应请求的方法都是以该地址作为父路径。  </p></li><li><p> 为了测试结论更加准确，我们可以加上一个项目名测试 myweb </p></li><li><p> 只注解在方法上面 </p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class TestController &#123;</span><br><span class="line">@RequestMapping(&quot;/h1&quot;)</span><br><span class="line">public String test()&#123;</span><br><span class="line">return &quot;test&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   访问路径：<a href="http://localhost:8080/">http://localhost:8080</a> / 项目名 / h1 </p><ul><li> 同时注解类与方法 </li></ul>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/admin&quot;)</span><br><span class="line">public class TestController &#123;</span><br><span class="line">@RequestMapping(&quot;/h1&quot;)</span><br><span class="line">public String test()&#123;</span><br><span class="line">return &quot;test&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   访问路径：<a href="http://localhost:8080/">http://localhost:8080</a> / 项目名/ admin /h1 , 需要先指定类的路径再指定方法的路径； </p><h4 id="RestFul-风格"><a href="#RestFul-风格" class="headerlink" title="RestFul 风格"></a>RestFul 风格</h4><p> Restful就是一个资源定位及资源操作的风格。<strong>不是标准也不是协议，只是一种风格</strong>。基于这个风格设计的软 件可以更简洁，更有层次，更易于实现缓存等机制。  </p><p> <strong>功能</strong> </p><p> 资源：互联网所有的事物都可以被抽象为资源 </p><p>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。 </p><p>分别对应 添加、 删除、修改、查询。 </p><p>传统方式操作资源 ：通过不同的参数来实现不同的效果！方法单一，post 和 get</p><p> <a href="http://127.0.0.1/item/queryItem.action?id=1">http://127.0.0.1/item/queryItem.action?id=1</a> 查询,GET</p><p> <a href="http://127.0.0.1/item/saveItem.action">http://127.0.0.1/item/saveItem.action</a> 新增,POST</p><p> <a href="http://127.0.0.1/item/updateItem.action">http://127.0.0.1/item/updateItem.action</a> 更新,POST </p><p><a href="http://127.0.0.1/item/deleteItem.action?id=1">http://127.0.0.1/item/deleteItem.action?id=1</a> 删除,GET或POST </p><p>使用RESTful操作资源 ：可以通过不同的请求方式来实现不同的效果！</p><p>如下：请求地址一样，但是功能可 以不同！ </p><p><a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 查询,GET </p><p><a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 新增,POST</p><p><a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 更新,PUT </p><p><a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 删除,DELETE </p><p> <strong>学习测试</strong> </p><ol><li>  在新建一个类 RestFulController  </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class RestFulController &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>  在Spring MVC中可以使用 @PathVariable 注解，让方法参数的值对应绑定到一个URI模板变量上。 </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class RestFulController &#123;</span><br><span class="line">//映射访问路径</span><br><span class="line">@RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span><br><span class="line">public String index(@PathVariable int p1, @PathVariable int p2, Model model)&#123;</span><br><span class="line">int result = p1+p2;</span><br><span class="line">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span><br><span class="line">model.addAttribute(&quot;msg&quot;, &quot;结果：&quot;+result);</span><br><span class="line">//返回视图位置</span><br><span class="line">return &quot;test&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li> 我们来测试请求查看下 </li></ol><p>   <img src="https://s1.ax1x.com/2022/06/22/j9YIiT.png" alt="1655883470290"></p><ol start="4"><li> 思考：使用路径变量的好处？ </li></ol><ul><li> 使路径变得更加简洁； </li><li>获得参数更加方便，框架会自动进行类型转换。 </li><li>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，如这里访 问是的路径是/commit/1/a，则路径与方法不匹配，而不会是参数转换失败。  </li></ul><p><img src="https://s1.ax1x.com/2022/06/22/j9YoJU.png" alt="1655883500693"></p><ol start="5"><li>我们来修改下对应的参数类型，再次测试 </li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//映射访问路径</span><br><span class="line">@RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span><br><span class="line">public String index(@PathVariable int p1, @PathVariable String p2, Model model)&#123;</span><br><span class="line">String result = p1+p2;</span><br><span class="line">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span><br><span class="line">model.addAttribute(&quot;msg&quot;, &quot;结果：&quot;+result);</span><br><span class="line">//返回视图位置</span><br><span class="line">return &quot;test&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/06/22/j9YTWF.png" alt="1655883547925"></p><p> <strong>使用method属性指定请求类型</strong></p><p> 用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等 </p><p>我们来测试一下： </p><ul><li> 增加一个方法 </li></ul>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//映射访问路径,必须是POST请求</span><br><span class="line">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.POST&#125;)</span><br><span class="line">public String index2(Model model)&#123;</span><br><span class="line">model.addAttribute(&quot;msg&quot;, &quot;hello!&quot;);</span><br><span class="line">return &quot;test&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li> 我们使用浏览器地址栏进行访问默认是Get请求，会报错405： </li></ul><p>  <img src="https://s1.ax1x.com/2022/06/22/j9YLLR.png" alt="1655883601523"></p><ul><li> 如果将POST修改为GET则正常了； </li></ul>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//映射访问路径,必须是Get请求</span><br><span class="line">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.GET&#125;)</span><br><span class="line">public String index2(Model model)&#123;</span><br><span class="line">model.addAttribute(&quot;msg&quot;, &quot;hello!&quot;);</span><br><span class="line">return &quot;test&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <img src="https://s1.ax1x.com/2022/06/22/j9Yqy9.png" alt="1655883637165"></p><p><strong>结论：</strong></p><p> Spring MVC 的 @RequestMapping 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以及 PATCH。 </p><p>所有的地址栏请求默认都会是 HTTP GET 类型的。 </p><p>方法级别的注解变体有如下几个：组合注解 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@GetMapping</span><br><span class="line">@PostMapping</span><br><span class="line">@PutMapping</span><br><span class="line">@DeleteMapping</span><br><span class="line">@PatchMapping</span><br></pre></td></tr></table></figure><p> @GetMapping 是一个组合注解，平时使用的会比较多！ </p><p>它所扮演的是 @RequestMapping(method =RequestMethod.GET) 的一个快捷方式。 </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMvc的学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC-04：数据处理及跳转</title>
      <link href="/2022/05/09/SpringMvc/SpringMVC-04%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%8F%8A%E8%B7%B3%E8%BD%AC/"/>
      <url>/2022/05/09/SpringMvc/SpringMVC-04%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%8F%8A%E8%B7%B3%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SpringMVC-04：数据处理及跳转"><a href="#SpringMVC-04：数据处理及跳转" class="headerlink" title="SpringMVC-04：数据处理及跳转"></a>SpringMVC-04：数据处理及跳转</h1><h3 id="结果跳转方式"><a href="#结果跳转方式" class="headerlink" title="结果跳转方式"></a>结果跳转方式</h3><h4 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h4><p> 设置ModelAndView对象 , 根据view的名称 , 和视图解析器跳到指定的页面 . </p><p>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 视图解析器 --&gt;</span><br><span class="line">&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span><br><span class="line">id=&quot;internalResourceViewResolver&quot;&gt;</span><br><span class="line">&lt;!-- 前缀 --&gt;</span><br><span class="line">&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt;</span><br><span class="line">&lt;!-- 后缀 --&gt;</span><br><span class="line">&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p> 对应的controller类  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ControllerTest1 implements Controller &#123;</span><br><span class="line">public ModelAndView handleRequest(HttpServletRequest httpServletRequest,</span><br><span class="line">HttpServletResponse httpServletResponse) throws Exception &#123;</span><br><span class="line">//返回一个模型视图对象</span><br><span class="line">ModelAndView mv = new ModelAndView();</span><br><span class="line">mv.addObject(&quot;msg&quot;,&quot;ControllerTest1&quot;);</span><br><span class="line">mv.setViewName(&quot;test&quot;);</span><br><span class="line">return mv;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ServletAPI"><a href="#ServletAPI" class="headerlink" title="ServletAPI"></a>ServletAPI</h4><p> 通过设置ServletAPI , 不需要视图解析器 </p><ol><li> 通过HttpServletResponse进行输出 </li><li> 通过HttpServletResponse实现重定向 </li><li> 通过HttpServletResponse实现转发 </li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class ResultGo &#123;</span><br><span class="line">@RequestMapping(&quot;/result/t1&quot;)</span><br><span class="line">public void test1(HttpServletRequest req, HttpServletResponse rsp) throws IOException &#123;</span><br><span class="line">rsp.getWriter().println(&quot;Hello,Spring BY servlet API&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@RequestMapping(&quot;/result/t2&quot;)</span><br><span class="line">public void test2(HttpServletRequest req, HttpServletResponse rsp) throws IOException &#123;</span><br><span class="line">rsp.sendRedirect(&quot;/index.jsp&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@RequestMapping(&quot;/result/t3&quot;)</span><br><span class="line">public void test3(HttpServletRequest req, HttpServletResponse rsp) throws Exception &#123;</span><br><span class="line">//转发</span><br><span class="line">req.setAttribute(&quot;msg&quot;,&quot;/result/t3&quot;);</span><br><span class="line">req.getRequestDispatcher(&quot;/WEB-INF/jsp/test.jsp&quot;).forward(req,rsp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h4><p> 通过SpringMVC来实现转发和重定向 - 无需视图解析器； </p><p> 测试前，需要将视图解析器注释掉 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class ResultSpringMVC &#123;</span><br><span class="line">@RequestMapping(&quot;/rsm/t1&quot;)</span><br><span class="line">public String test1()&#123;</span><br><span class="line">//转发</span><br><span class="line">return &quot;/index.jsp&quot;;</span><br><span class="line">&#125;</span><br><span class="line">@RequestMapping(&quot;/rsm/t2&quot;)</span><br><span class="line">public String test2()&#123;</span><br><span class="line">//转发二</span><br><span class="line">return &quot;forward:/index.jsp&quot;;</span><br><span class="line">&#125;</span><br><span class="line">@RequestMapping(&quot;/rsm/t3&quot;)</span><br><span class="line">public String test3()&#123;</span><br><span class="line">//重定向</span><br><span class="line">return &quot;redirect:/index.jsp&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 通过SpringMVC来实现转发和重定向 - 有视图解析器； </p><p> 重定向 , 不需要视图解析器 , 本质就是重新请求一个新地方嘛 , 所以注意路径问题. 可以重定向到另外一个请求实现 .  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class ResultSpringMVC2 &#123;</span><br><span class="line">@RequestMapping(&quot;/rsm2/t1&quot;)</span><br><span class="line">public String test1()&#123;</span><br><span class="line">//转发</span><br><span class="line">return &quot;test&quot;;</span><br><span class="line">&#125;</span><br><span class="line">@RequestMapping(&quot;/rsm2/t2&quot;)</span><br><span class="line">public String test2()&#123;</span><br><span class="line">//重定向</span><br><span class="line">return &quot;redirect:/index.jsp&quot;;</span><br><span class="line">//return &quot;redirect:hello.do&quot;; //hello.do为另一个请求/</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><h4 id="处理提交数据"><a href="#处理提交数据" class="headerlink" title="处理提交数据"></a>处理提交数据</h4><ol><li><p>提交的域名称和处理方法的参数名一致 </p><p> 提交数据 : <a href="http://localhost:8080/hello?name=kuangshen">http://localhost:8080/hello?name=kuangshen</a> </p></li></ol><p>   处理方法 :  </p>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/hello&quot;)</span><br><span class="line">public String hello(String name)&#123;</span><br><span class="line">System.out.println(name);</span><br><span class="line">return &quot;hello&quot;;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ol start="2"><li><p>提交的域名称和处理方法的参数名不一致 </p><p> 提交数据 : <a href="http://localhost:8080/hello?username=kuangshen">http://localhost:8080/hello?username=kuangshen</a> </p></li></ol><p>   处理方法 : </p>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//@RequestParam(&quot;username&quot;) : username提交的域的名称 .</span><br><span class="line">@RequestMapping(&quot;/hello&quot;)</span><br><span class="line">public String hello(@RequestParam(&quot;username&quot;) String name)&#123;</span><br><span class="line">System.out.println(name);</span><br><span class="line">return &quot;hello&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>提交的是一个对象 </p><p> 要求提交的表单域和对象的属性名一致 , 参数使用对象即可</p></li></ol><p>   1、实体类 </p>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">private int id;</span><br><span class="line">private String name;</span><br><span class="line">private int age;</span><br><span class="line">//构造</span><br><span class="line">//get/set</span><br><span class="line">//tostring()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>2、提交数据 : http://localhost:8080/mvc04/user?name=kuangshen&amp;id=1&amp;age=15 </code></pre><p>   3、处理方法  </p>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/user&quot;)</span><br><span class="line">public String user(User user)&#123;</span><br><span class="line">System.out.println(user);</span><br><span class="line">return &quot;hello&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>后台输出 : User &#123; id=1, name=&#39;kuangshen&#39;, age=15 &#125; </code></pre><p>   说明：如果使用对象的话，前端传递的参数名和对象名必须一致，否则就是null。 </p><h3 id="数据显示到前端"><a href="#数据显示到前端" class="headerlink" title="数据显示到前端"></a>数据显示到前端</h3><p> 第一种 : 通过ModelAndView </p><p>我们前面一直都是如此 . 就不过多解释  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ControllerTest1 implements Controller &#123;</span><br><span class="line">public ModelAndView handleRequest(HttpServletRequest httpServletRequest,</span><br><span class="line">HttpServletResponse httpServletResponse) throws Exception &#123;</span><br><span class="line">//返回一个模型视图对象</span><br><span class="line">ModelAndView mv = new ModelAndView();</span><br><span class="line">mv.addObject(&quot;msg&quot;,&quot;ControllerTest1&quot;);</span><br><span class="line">mv.setViewName(&quot;test&quot;);</span><br><span class="line">return mv;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 第二种 : 通过ModelMap </p><p>ModelMap </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/hello&quot;)</span><br><span class="line">public String hello(@RequestParam(&quot;username&quot;) String name, ModelMap model)&#123;</span><br><span class="line">//封装要显示到视图中的数据</span><br><span class="line">//相当于req.setAttribute(&quot;name&quot;,name);</span><br><span class="line">model.addAttribute(&quot;name&quot;,name);</span><br><span class="line">System.out.println(name);</span><br><span class="line">return &quot;hello&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 第三种 : 通过Model </p><p>Model  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/ct2/hello&quot;)</span><br><span class="line">public String hello(@RequestParam(&quot;username&quot;) String name, Model model)&#123;</span><br><span class="line">//封装要显示到视图中的数据</span><br><span class="line">//相当于req.setAttribute(&quot;name&quot;,name);</span><br><span class="line">model.addAttribute(&quot;msg&quot;,name);</span><br><span class="line">System.out.println(name);</span><br><span class="line">return &quot;test&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p> 就对于新手而言简单来说使用区别就是： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Model 只有寥寥几个方法只适合用于储存数据，简化了新手对于Model对象的操作和理解；</span><br><span class="line">ModelMap 继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性；</span><br><span class="line">ModelAndView 可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。</span><br></pre></td></tr></table></figure><p> 当然更多的以后开发考虑的更多的是性能和优化，就不能单单仅限于此的了解。</p><p>请使用80%的时间打好扎实的基础，剩下18%的时间研究框架，2%的时间去学点英文，框架的官方文档永远是最好的教程。 </p><h4 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h4><p>尽量能使用utf-8的字符集就是用它！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMvc的学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC-06：Json交互处理</title>
      <link href="/2022/05/09/SpringMvc/SpringMVC-06%EF%BC%9AJson%E4%BA%A4%E4%BA%92%E5%A4%84%E7%90%86/"/>
      <url>/2022/05/09/SpringMvc/SpringMVC-06%EF%BC%9AJson%E4%BA%A4%E4%BA%92%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SpringMVC-06：Json交互处理"><a href="#SpringMVC-06：Json交互处理" class="headerlink" title="SpringMVC-06：Json交互处理"></a>SpringMVC-06：Json交互处理</h1><h3 id="什么是JSON？"><a href="#什么是JSON？" class="headerlink" title="什么是JSON？"></a>什么是JSON？</h3><ul><li> JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。 </li><li>采用完全独立于编程语言的文本格式来存储和表示数据。</li><li> 简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 </li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。 </li><li>在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字 符串、数字、对象、数组等。看看他的要求和语法格式： </li><li>对象表示为键值对，数据由逗号分隔 </li><li>花括号保存对象 </li><li>方括号保存数组 </li></ul><p> JSON 键值对是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合 中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;name&quot;: &quot;QinJiang&quot;&#125;</span><br><span class="line">&#123;&quot;age&quot;: &quot;3&quot;&#125;</span><br><span class="line">&#123;&quot;sex&quot;: &quot;男&quot;&#125;</span><br></pre></td></tr></table></figure><p> 很多人搞不清楚 JSON 和 JavaScript 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解： JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj = &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;; //这是一个对象，注意键名也是可以使用引号包裹的</span><br><span class="line">var json = &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;; //这是一个 JSON 字符串，本质是一个字符串</span><br></pre></td></tr></table></figure><p> JSON 和 JavaScript 对象互转 </p><p> 要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj = JSON.parse(&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;);</span><br><span class="line">//结果是 &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;</span><br></pre></td></tr></table></figure><p> 要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var json = JSON.stringify(&#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;);</span><br><span class="line">//结果是 &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure><p> 代码测试 </p><ol><li><p> 新建一个module ，springmvc-05-json ， 添加web的支持 </p></li><li><p> 在web目录下新建一个 json-1.html ， 编写测试内容 </p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;JSON_秦疆&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">//编写一个js的对象</span><br><span class="line">var user = &#123;</span><br><span class="line">name:&quot;秦疆&quot;,</span><br><span class="line">age:3,</span><br><span class="line">sex:&quot;男&quot;</span><br><span class="line">&#125;;</span><br><span class="line">//将js对象转换成json字符串</span><br><span class="line">var str = JSON.stringify(user);</span><br><span class="line">console.log(str);</span><br><span class="line">//将json字符串转换为js对象</span><br><span class="line">var user2 = JSON.parse(str);</span><br><span class="line">console.log(user2.age,user2.name,user2.sex);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li> 在IDEA中使用浏览器打开，查看控制台输出 </li></ol><p>   <img src="https://s1.ax1x.com/2022/06/22/j9Y7z4.png" alt="1655888591247"></p><h4 id="Controller返回JSON数据"><a href="#Controller返回JSON数据" class="headerlink" title="Controller返回JSON数据"></a>Controller返回JSON数据</h4><p> Jackson应该是目前比较好的json解析工具了 </p><p>当然工具不止这一个，比如还有阿里巴巴的 fastjson 等等。 </p><p>我们这里使用Jackson，使用它需要导入它的jar包； </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.9.8&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p> 配置SpringMVC需要的配置 </p><p>web.xml </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee</span><br><span class="line">http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class="line">version=&quot;4.0&quot;&gt;</span><br><span class="line">&lt;!--1.注册servlet--&gt;</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">&lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</span><br><span class="line">&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;classpath:springmvc-servlet.xml&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span><br><span class="line">&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;!--所有请求都会被springmvc拦截 --&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">&lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</span><br><span class="line">&lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">&lt;filter-name&gt;encoding&lt;/filter-name&gt;</span><br><span class="line">&lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">&lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;utf-8&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">&lt;filter-name&gt;encoding&lt;/filter-name&gt;</span><br><span class="line">&lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">&lt;/filter-mapping&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><p> springmvc-servlet.xml  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">http://www.springframework.org/schema/context</span><br><span class="line">https://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="line">http://www.springframework.org/schema/mvc</span><br><span class="line">https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;</span><br><span class="line">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.kuang.controller&quot;/&gt;</span><br><span class="line">&lt;!-- 视图解析器 --&gt;</span><br><span class="line">&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span><br><span class="line">id=&quot;internalResourceViewResolver&quot;&gt;</span><br><span class="line">&lt;!-- 前缀 --&gt;</span><br><span class="line">&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt;</span><br><span class="line">&lt;!-- 后缀 --&gt;</span><br><span class="line">&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p> 我们随便编写一个User的实体类，然后我们去编写我们的测试Controller；  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.kuang.pojo;</span><br><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.NoArgsConstructor;</span><br><span class="line">//需要导入lombok</span><br><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class User &#123;</span><br><span class="line">private String name;</span><br><span class="line">private int age;</span><br><span class="line">private String sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这里我们需要两个新东西，一个是@ResponseBody，一个是ObjectMapper对象，我们看下具体的用法 </p><p>编写一个Controller；  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class UserController &#123;</span><br><span class="line">@RequestMapping(&quot;/json1&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String json1() throws JsonProcessingException &#123;</span><br><span class="line">//创建一个jackson的对象映射器，用来解析数据</span><br><span class="line">ObjectMapper mapper = new ObjectMapper();</span><br><span class="line">//创建一个对象</span><br><span class="line">User user = new User(&quot;秦疆1号&quot;, 3, &quot;男&quot;);</span><br><span class="line">//将我们的对象解析成为json格式</span><br><span class="line">String str = mapper.writeValueAsString(user);</span><br><span class="line">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span><br><span class="line">return str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 配置Tomcat ， 启动测试一下！</p><p> <a href="http://localhost:8080/json1">http://localhost:8080/json1</a>  </p><p><img src="https://s1.ax1x.com/2022/06/22/j9YXe1.png" alt="1655888722567"></p><h4 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h4><p> 乱码统一解决 </p><p>上一种方法比较麻烦，如果项目中有许多请求则每一个都要添加，可以通过Spring配置统一指定，这样就不 用每次都去处理了！ </p><p>我们可以在springmvc的配置文件上添加一段消息StringHttpMessageConverter转换配置！ </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;mvc:annotation-driven&gt;</span><br><span class="line">&lt;mvc:message-converters register-defaults=&quot;true&quot;&gt;</span><br><span class="line">&lt;bean class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;</span><br><span class="line">&lt;constructor-arg value=&quot;UTF-8&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean</span><br><span class="line">class=&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;&gt;</span><br><span class="line">&lt;property name=&quot;objectMapper&quot;&gt;</span><br><span class="line">&lt;bean</span><br><span class="line">class=&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;&gt;</span><br><span class="line">&lt;property name=&quot;failOnEmptyBeans&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/mvc:message-converters&gt;</span><br><span class="line">&lt;/mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure><p> 返回json字符串统一解决 </p><p>在类上直接使用 <strong>@RestController</strong> ，这样子，里面所有的方法都只会返回 json 字符串了，不用再每一个都 添加@ResponseBody ！我们在前后端分离开发中，一般都使用 @RestController ，十分便捷！ </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class UserController &#123;</span><br><span class="line">//produces:指定响应体返回类型和编码</span><br><span class="line">@RequestMapping(value = &quot;/json1&quot;)</span><br><span class="line">public String json1() throws JsonProcessingException &#123;</span><br><span class="line">//创建一个jackson的对象映射器，用来解析数据</span><br><span class="line">ObjectMapper mapper = new ObjectMapper();</span><br><span class="line">//创建一个对象</span><br><span class="line">User user = new User(&quot;秦疆1号&quot;, 3, &quot;男&quot;);</span><br><span class="line">//将我们的对象解析成为json格式</span><br><span class="line">String str = mapper.writeValueAsString(user);</span><br><span class="line">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span><br><span class="line">return str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 启动tomcat测试，结果都正常输出！ </p><h4 id="测试集合输出"><a href="#测试集合输出" class="headerlink" title="测试集合输出"></a>测试集合输出</h4><p> 增加一个新的方法  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/json2&quot;)</span><br><span class="line">public String json2() throws JsonProcessingException &#123;</span><br><span class="line">//创建一个jackson的对象映射器，用来解析数据</span><br><span class="line">ObjectMapper mapper = new ObjectMapper();</span><br><span class="line">//创建一个对象</span><br><span class="line">User user1 = new User(&quot;秦疆1号&quot;, 3, &quot;男&quot;);</span><br><span class="line">User user2 = new User(&quot;秦疆2号&quot;, 3, &quot;男&quot;);</span><br><span class="line">User user3 = new User(&quot;秦疆3号&quot;, 3, &quot;男&quot;);</span><br><span class="line">User user4 = new User(&quot;秦疆4号&quot;, 3, &quot;男&quot;);</span><br><span class="line">List&lt;User&gt; list = new ArrayList&lt;User&gt;();</span><br><span class="line">list.add(user1);</span><br><span class="line">list.add(user2);</span><br><span class="line">list.add(user3);</span><br><span class="line">list.add(user4);</span><br><span class="line">//将我们的对象解析成为json格式</span><br><span class="line">String str = mapper.writeValueAsString(list);</span><br><span class="line">return str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 运行结果 : 十分完美，没有任何问题！  </p><p><img src="https://s1.ax1x.com/2022/06/22/j9Yjdx.png" alt="1655890025121"></p><h4 id="输出时间对象"><a href="#输出时间对象" class="headerlink" title="输出时间对象"></a>输出时间对象</h4><p> 增加一个新的方法  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/json3&quot;)</span><br><span class="line">public String json3() throws JsonProcessingException &#123;</span><br><span class="line">ObjectMapper mapper = new ObjectMapper();</span><br><span class="line">//创建时间一个对象，java.util.Date</span><br><span class="line">Date date = new Date();</span><br><span class="line">//将我们的对象解析成为json格式</span><br><span class="line">String str = mapper.writeValueAsString(date);</span><br><span class="line">return str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 运行结果  ：</p><p><img src="https://s1.ax1x.com/2022/06/22/j9Yvo6.png" alt="1655890146789"></p><ul><li> 默认日期格式会变成一个数字，是1970年1月1日到当前日期的毫秒数！ </li><li>Jackson 默认是会把时间转成timestamps形式  </li></ul><p> 解决方案：取消timestamps形式 ， 自定义时间格式 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/json4&quot;)</span><br><span class="line">public String json4() throws JsonProcessingException &#123;</span><br><span class="line">ObjectMapper mapper = new ObjectMapper();</span><br><span class="line">//不使用时间戳的方式</span><br><span class="line">mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);</span><br><span class="line">//自定义日期格式对象</span><br><span class="line">SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">//指定日期格式</span><br><span class="line">mapper.setDateFormat(sdf);</span><br><span class="line">Date date = new Date();</span><br><span class="line">String str = mapper.writeValueAsString(date);</span><br><span class="line">return str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 运行结果 : 成功的输出了时间！ </p><p><img src="https://s1.ax1x.com/2022/06/22/j9YzFK.png" alt="1655890269934"></p><h4 id="抽取为工具类"><a href="#抽取为工具类" class="headerlink" title="抽取为工具类"></a>抽取为工具类</h4><p> 如果要经常使用的话，这样是比较麻烦的，我们可以将这些代码封装到一个工具类中；我们去 编写下 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.kuang.utils;</span><br><span class="line">import com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">public class JsonUtils &#123;</span><br><span class="line">public static String getJson(Object object) &#123;</span><br><span class="line">return getJson(object,&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public static String getJson(Object object,String dateFormat) &#123;</span><br><span class="line">ObjectMapper mapper = new ObjectMapper();</span><br><span class="line">//不使用时间差的方式</span><br><span class="line">mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);</span><br><span class="line">//自定义日期格式对象</span><br><span class="line">SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);</span><br><span class="line">//指定日期格式</span><br><span class="line">mapper.setDateFormat(sdf);</span><br><span class="line">try &#123;</span><br><span class="line">return mapper.writeValueAsString(object);</span><br><span class="line">&#125; catch (JsonProcessingException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 我们使用工具类，代码就更加简洁了！ </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/json5&quot;)</span><br><span class="line">public String json5() throws JsonProcessingException &#123;</span><br><span class="line">Date date = new Date();</span><br><span class="line">String json = JsonUtils.getJson(date);</span><br><span class="line">return json;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMvc的学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC-07：Ajax研究</title>
      <link href="/2022/05/09/SpringMvc/SpringMVC-07%EF%BC%9AAjax%E7%A0%94%E7%A9%B6/"/>
      <url>/2022/05/09/SpringMvc/SpringMVC-07%EF%BC%9AAjax%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SpringMVC-07：Ajax研究"><a href="#SpringMVC-07：Ajax研究" class="headerlink" title="SpringMVC-07：Ajax研究"></a>SpringMVC-07：Ajax研究</h1><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li> AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。 </li><li>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。 </li><li>Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的 技术。 </li><li>在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完 成搜索单词。 </li><li>Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时， JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。 </li><li>就和国内百度的搜索框一样! </li><li>传统的网页(即不用ajax技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。 </li><li>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</li><li> 使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。 </li></ul><h4 id="伪造Ajax"><a href="#伪造Ajax" class="headerlink" title="伪造Ajax"></a>伪造Ajax</h4><p> 我们可以使用前端的一个标签来伪造一个ajax的样子。iframe标签 </p><ol><li><p> 新建一个module ：sspringmvc-06-ajax ， 导入web支持！ </p></li><li><p> 编写一个 ajax-frame.html 使用 iframe 测试，感受下效果 </p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;kuangshen&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">window.onload = function()&#123;</span><br><span class="line">var myDate = new Date();</span><br><span class="line">document.getElementById(&#x27;currentTime&#x27;).innerText = myDate.getTime();</span><br><span class="line">&#125;;</span><br><span class="line">function LoadPage()&#123;</span><br><span class="line">var targetUrl = document.getElementById(&#x27;url&#x27;).value;</span><br><span class="line">console.log(targetUrl);</span><br><span class="line">document.getElementById(&quot;iframePosition&quot;).src = targetUrl;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;p&gt;请输入要加载的地址：&lt;span id=&quot;currentTime&quot;&gt;&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;input id=&quot;url&quot; type=&quot;text&quot; value=&quot;https://www.baidu.com/&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;提交&quot; onclick=&quot;LoadPage()&quot;&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h3&gt;加载页面位置：&lt;/h3&gt;</span><br><span class="line">&lt;iframe id=&quot;iframePosition&quot; style=&quot;width: 100%;height: 500px;&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>使用IDEA开浏览器测试一下！ </p><p> 利用AJAX可以做： </p></li></ol><ul><li> 注册时，输入用户名自动检测用户是否已经存在。 </li><li>登陆时，提示用户名密码错误 </li><li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行 也删除。 ….等等  </li></ul><h4 id="jQuery-ajax"><a href="#jQuery-ajax" class="headerlink" title="jQuery.ajax"></a>jQuery.ajax</h4><p> 纯JS原生实现Ajax我们不去讲解这里，直接使用jquery提供的，方便学习和使用，避免重复造轮子，有兴趣 的同学可以去了解下JS原生XMLHttpRequest ！ </p><p>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以 异步方式从服务器获取新数据。 </p><p>jQuery 提供多个与 AJAX 有关的方法。 </p><p>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</p><p>jQuery 不是生产者，而是大自然搬运工。 </p><p>jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用！ </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jQuery.ajax(...)</span><br><span class="line">部分参数：</span><br><span class="line">url：请求地址</span><br><span class="line">type：请求方式，GET、POST（1.9.0之后用method）</span><br><span class="line">headers：请求头</span><br><span class="line">data：要发送的数据</span><br><span class="line">contentType：即将发送信息至服务器的内容编码类型(默认: &quot;application/x-www-form-urlencoded;</span><br><span class="line">charset=UTF-8&quot;)</span><br><span class="line">async：是否异步</span><br><span class="line">timeout：设置请求超时时间（毫秒）</span><br><span class="line">beforeSend：发送请求前执行的函数(全局)</span><br><span class="line">complete：完成之后执行的回调函数(全局)</span><br><span class="line">success：成功之后执行的回调函数(全局)</span><br><span class="line">error：失败之后执行的回调函数(全局)</span><br><span class="line">accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型</span><br><span class="line">dataType：将服务器端返回的数据转换成指定类型</span><br><span class="line">&quot;xml&quot;: 将服务器端返回的内容转换成xml格式</span><br><span class="line">&quot;text&quot;: 将服务器端返回的内容转换成普通文本格式</span><br><span class="line">&quot;html&quot;: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会</span><br><span class="line">尝试去执行。</span><br><span class="line">&quot;script&quot;: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式</span><br><span class="line">&quot;json&quot;: 将服务器端返回的内容转换成相应的JavaScript对象</span><br><span class="line">&quot;jsonp&quot;: JSONP 格式使用 JSONP 形式调用函数时，如 &quot;myurl?callback=?&quot; jQuery 将自动替换 ?</span><br><span class="line">为正确的函数名，以执行回调函数</span><br></pre></td></tr></table></figure><p> 我们来个简单的测试，使用最原始的HttpServletResponse处理 , .最简单 , 最通用 </p><ol><li> 配置web.xml 和 springmvc的配置文件，复制上面案例的即可 【记得静态资源过滤和注解驱动配置上】 </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">http://www.springframework.org/schema/context</span><br><span class="line">https://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="line">http://www.springframework.org/schema/mvc</span><br><span class="line">https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;</span><br><span class="line">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.kuang.controller&quot;/&gt;</span><br><span class="line">&lt;mvc:default-servlet-handler /&gt;</span><br><span class="line">&lt;mvc:annotation-driven /&gt;</span><br><span class="line">&lt;!-- 视图解析器 --&gt;</span><br><span class="line">&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span><br><span class="line">id=&quot;internalResourceViewResolver&quot;&gt;</span><br><span class="line">&lt;!-- 前缀 --&gt;</span><br><span class="line">&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt;</span><br><span class="line">&lt;!-- 后缀 --&gt;</span><br><span class="line">&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li> 编写一个AjaxController  </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class AjaxController &#123;</span><br><span class="line">@RequestMapping(&quot;/a1&quot;)</span><br><span class="line">public void ajax1(String name , HttpServletResponse response) throws IOException &#123;</span><br><span class="line">if (&quot;admin&quot;.equals(name))&#123;</span><br><span class="line">response.getWriter().print(&quot;true&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">response.getWriter().print(&quot;false&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li> 导入jquery ， 可以使用在线的CDN ， 也可以下载导入 </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li> 编写index.jsp测试  </li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">&lt;%--&lt;script src=&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;--%&gt;</span><br><span class="line">&lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function a1()&#123;</span><br><span class="line">$.post(&#123;</span><br><span class="line">url:&quot;$&#123;pageContext.request.contextPath&#125;/a1&quot;,</span><br><span class="line">data:&#123;&#x27;name&#x27;:$(&quot;#txtName&quot;).val()&#125;,</span><br><span class="line">success:function (data,status) &#123;</span><br><span class="line">alert(data);</span><br><span class="line">alert(status);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--onblur：失去焦点触发事件--%&gt;</span><br><span class="line">用户名:&lt;input type=&quot;text&quot; id=&quot;txtName&quot; onblur=&quot;a1()&quot;/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li> 启动tomcat测试！打开浏览器的控制台，当我们鼠标离开输入框的时候，可以看到发出了一个ajax的请 求！是后台返回给我们的结果！测试成功！ </li></ol><h4 id="Springmvc实现"><a href="#Springmvc实现" class="headerlink" title="Springmvc实现"></a>Springmvc实现</h4><p> <strong>实体类user</strong>  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class User &#123;</span><br><span class="line">private String name;</span><br><span class="line">private int age;</span><br><span class="line">private String sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 我们来获取一个集合对象，展示到前端页面 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/a2&quot;)</span><br><span class="line">public List&lt;User&gt; ajax2()&#123;</span><br><span class="line">List&lt;User&gt; list = new ArrayList&lt;User&gt;();</span><br><span class="line">list.add(new User(&quot;秦疆1号&quot;,3,&quot;男&quot;));</span><br><span class="line">list.add(new User(&quot;秦疆2号&quot;,3,&quot;男&quot;));</span><br><span class="line">list.add(new User(&quot;秦疆3号&quot;,3,&quot;男&quot;));</span><br><span class="line">return list; //由于@RestController注解，将list转成json格式返回</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 前端页面 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; id=&quot;btn&quot; value=&quot;获取数据&quot;/&gt;</span><br><span class="line">&lt;table width=&quot;80%&quot; align=&quot;center&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">&lt;td&gt;年龄&lt;/td&gt;</span><br><span class="line">&lt;td&gt;性别&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tbody id=&quot;content&quot;&gt;</span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function () &#123;</span><br><span class="line">$(&quot;#btn&quot;).click(function () &#123;</span><br><span class="line">$.post(&quot;$&#123;pageContext.request.contextPath&#125;/a2&quot;,function (data) &#123;</span><br><span class="line">console.log(data)</span><br><span class="line">var html=&quot;&quot;;</span><br><span class="line">for (var i = 0; i &lt;data.length ; i++) &#123;</span><br><span class="line">html+= &quot;&lt;tr&gt;&quot; +</span><br><span class="line">&quot;&lt;td&gt;&quot; + data[i].name + &quot;&lt;/td&gt;&quot; +</span><br><span class="line">&quot;&lt;td&gt;&quot; + data[i].age + &quot;&lt;/td&gt;&quot; +</span><br><span class="line">&quot;&lt;td&gt;&quot; + data[i].sex + &quot;&lt;/td&gt;&quot; +</span><br><span class="line">&quot;&lt;/tr&gt;&quot;</span><br><span class="line">&#125;</span><br><span class="line">$(&quot;#content&quot;).html(html);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p> 成功实现了数据回显！可以体会一下Ajax的好处！ </p><h4 id="注册提示效果"><a href="#注册提示效果" class="headerlink" title="注册提示效果"></a>注册提示效果</h4><p> 我们再测试一个小Demo，思考一下我们平时注册时候，输入框后面的实时提示怎么做到的；如何优化 我们写一个Controller </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/a3&quot;)</span><br><span class="line">public String ajax3(String name,String pwd)&#123;</span><br><span class="line">String msg = &quot;&quot;;</span><br><span class="line">//模拟数据库中存在数据</span><br><span class="line">if (name!=null)&#123;</span><br><span class="line">if (&quot;admin&quot;.equals(name))&#123;</span><br><span class="line">msg = &quot;OK&quot;;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">msg = &quot;用户名输入错误&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (pwd!=null)&#123;</span><br><span class="line">if (&quot;123456&quot;.equals(pwd))&#123;</span><br><span class="line">msg = &quot;OK&quot;;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">msg = &quot;密码输入有误&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return msg; //由于@RestController注解，将msg转成json格式返回</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 前端页面 login.jsp </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;ajax&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function a1()&#123;</span><br><span class="line">$.post(&#123;</span><br><span class="line">url:&quot;$&#123;pageContext.request.contextPath&#125;/a3&quot;,</span><br><span class="line">data:&#123;&#x27;name&#x27;:$(&quot;#name&quot;).val()&#125;,</span><br><span class="line">success:function (data) &#123;</span><br><span class="line">if (data.toString()==&#x27;OK&#x27;)&#123;</span><br><span class="line">$(&quot;#userInfo&quot;).css(&quot;color&quot;,&quot;green&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">$(&quot;#userInfo&quot;).css(&quot;color&quot;,&quot;red&quot;);</span><br><span class="line">&#125;</span><br><span class="line">$(&quot;#userInfo&quot;).html(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">function a2()&#123;</span><br><span class="line">$.post(&#123;</span><br><span class="line">url:&quot;$&#123;pageContext.request.contextPath&#125;/a3&quot;,</span><br><span class="line">data:&#123;&#x27;pwd&#x27;:$(&quot;#pwd&quot;).val()&#125;,</span><br><span class="line">success:function (data) &#123;</span><br><span class="line">if (data.toString()==&#x27;OK&#x27;)&#123;</span><br><span class="line">$(&quot;#pwdInfo&quot;).css(&quot;color&quot;,&quot;green&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">$(&quot;#pwdInfo&quot;).css(&quot;color&quot;,&quot;red&quot;);</span><br><span class="line">&#125;</span><br><span class="line">$(&quot;#pwdInfo&quot;).html(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">用户名:&lt;input type=&quot;text&quot; id=&quot;name&quot; onblur=&quot;a1()&quot;/&gt;</span><br><span class="line">&lt;span id=&quot;userInfo&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">密码:&lt;input type=&quot;text&quot; id=&quot;pwd&quot; onblur=&quot;a2()&quot;/&gt;</span><br><span class="line">&lt;span id=&quot;pwdInfo&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/06/22/j9tSJO.png" alt="1655895506244"></p><h4 id="获取baidu接口Demo"><a href="#获取baidu接口Demo" class="headerlink" title="获取baidu接口Demo"></a>获取baidu接口Demo</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;JSONP百度搜索&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">#q&#123;</span><br><span class="line">width: 500px;</span><br><span class="line">height: 30px;</span><br><span class="line">border:1px solid #ddd;</span><br><span class="line">line-height: 30px;</span><br><span class="line">display: block;</span><br><span class="line">margin: 0 auto;</span><br><span class="line">padding: 0 10px;</span><br><span class="line">font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line">#ul&#123;</span><br><span class="line">width: 520px;</span><br><span class="line">list-style: none;</span><br><span class="line">margin: 0 auto;</span><br><span class="line">padding: 0;</span><br><span class="line">border:1px solid #ddd;</span><br><span class="line">margin-top: -1px;</span><br><span class="line">display: none;</span><br><span class="line">&#125;</span><br><span class="line">#ul li&#123;</span><br><span class="line">line-height: 30px;</span><br><span class="line">padding: 0 10px;</span><br><span class="line">&#125;</span><br><span class="line">#ul li:hover&#123;</span><br><span class="line">background-color: #f60;</span><br><span class="line">color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 2.步骤二</span><br><span class="line">// 定义demo函数 (分析接口、数据)</span><br><span class="line">function demo(data)&#123;</span><br><span class="line">var Ul = document.getElementById(&#x27;ul&#x27;);</span><br><span class="line">var html = &#x27;&#x27;;</span><br><span class="line">// 如果搜索数据存在 把内容添加进去</span><br><span class="line">if (data.s.length) &#123;</span><br><span class="line">// 隐藏掉的ul显示出来</span><br><span class="line">Ul.style.display = &#x27;block&#x27;;</span><br><span class="line">// 搜索到的数据循环追加到li里</span><br><span class="line">for(var i = 0;i&lt;data.s.length;i++)&#123;</span><br><span class="line">html += &#x27;&lt;li&gt;&#x27;+data.s[i]+&#x27;&lt;/li&gt;&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">// 循环的li写入ul</span><br><span class="line">Ul.innerHTML = html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 1.步骤一</span><br><span class="line">window.onload = function()&#123;</span><br><span class="line">// 获取输入框和ul</span><br><span class="line">var Q = document.getElementById(&#x27;q&#x27;);</span><br><span class="line">var Ul = document.getElementById(&#x27;ul&#x27;);</span><br><span class="line">// 事件鼠标抬起时候</span><br><span class="line">Q.onkeyup = function()&#123;</span><br><span class="line">// 如果输入框不等于空</span><br><span class="line">if (this.value != &#x27;&#x27;) &#123;</span><br><span class="line">// ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆JSONPz重点☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆</span><br><span class="line">// 创建标签</span><br><span class="line">var script = document.createElement(&#x27;script&#x27;);</span><br><span class="line">//给定要跨域的地址 赋值给src</span><br><span class="line">//这里是要请求的跨域的地址 我写的是百度搜索的跨域地址</span><br><span class="line">script.src = &#x27;https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?</span><br><span class="line">wd=&#x27;+this.value+&#x27;&amp;cb=demo&#x27;;</span><br><span class="line">// 将组合好的带src的script标签追加到body里</span><br><span class="line">document.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; id=&quot;q&quot; /&gt;</span><br><span class="line">&lt;ul id=&quot;ul&quot;&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><p> Ajax在我们开发中十分重要！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMvc的学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-01概述及IOC理论推导</title>
      <link href="/2022/05/08/Spring01%EF%BC%9A%E6%A6%82%E8%BF%B0%E5%8F%8AIOC%E7%90%86%E8%AE%BA%E6%8E%A8%E5%AF%BC/"/>
      <url>/2022/05/08/Spring01%EF%BC%9A%E6%A6%82%E8%BF%B0%E5%8F%8AIOC%E7%90%86%E8%AE%BA%E6%8E%A8%E5%AF%BC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring01：概述及IOC理论推导"><a href="#Spring01：概述及IOC理论推导" class="headerlink" title="Spring01：概述及IOC理论推导"></a>Spring01：概述及IOC理论推导</h1><blockquote><p>简介</p></blockquote><p><strong>Spring理念</strong> : 在我看来，Spring使现有技术更加实用 . 本身就是一个大杂烩 , 整合现有的框架的一个技术，主要的用途在于简化开发。 </p><p>官网 : <a href="http://spring.io/">http://spring.io/</a> </p><p>官方下载地址 : <a href="https://repo.spring.io/libs-release-local/org/springframework/spring/">https://repo.spring.io/libs-release-local/org/springframework/spring/</a> </p><p>GitHub : <a href="https://github.com/spring-projects">https://github.com/spring-projects</a>  </p><blockquote><p>优势</p></blockquote><ul><li>Spring是一个轻量级的、非入侵式的免费开源的框架、容器</li><li>具有控制反转IOC，面向切面AOP</li></ul><p>一句话：Spring是一个轻量级的控制反转（IOC）和面向切面（AOP）的容器（框架）。</p><blockquote><p>组成</p></blockquote><p><img src="https://s1.ax1x.com/2022/05/08/O3755R.png"></p><p> Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定 义了创建、配置和管理 bean 的方式 . </p><p><img src="https://s1.ax1x.com/2022/05/08/O3j8eK.png"></p><p> 组成 Spring 框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块 的功能如下： </p><ul><li> <strong>核心容器：</strong>核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory，它是工厂模 式的实现。BeanFactory 使用控制反转（IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。 </li><li> <strong>Spring上下文：</strong>Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括 企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。 </li><li> <strong>Spring Aop：</strong> 通过配置管理特性，Spring AOP 模块直接将面向切面的编程功能 , 集成到了 Spring 框 架中。所以，可以很容易地使 Spring 框架管理任何支持 AOP的对象。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖组件，就可以将声明性事 务管理集成到应用程序中。 </li><li> <strong>Spring Dao：</strong> JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数 据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数 量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。 </li><li> <strong>Spring Orm：</strong> Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。  </li><li> <strong>Spring Web模块：</strong> Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了 上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请 求参数绑定到域对象的工作。 </li><li> <strong>Spring Mvc框架：</strong> MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口， MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。 </li></ul><blockquote><p>SpringBoot-SpringClound</p></blockquote><ul><li> Spring Boot 是 Spring 的一套快速配置脚手架，可以基于Spring Boot 快速开发单个微服务; </li><li> Spring Cloud是基于Spring Boot实现的； </li><li> Spring Boot专注于快速、方便集成的单个微服务个体，Spring Cloud关注全局的服务治理框架； </li><li> Spring Boot使用了约束优于配置的理念，很多集成方案已经帮你选择好了，能不配置就不配置 , Spring Cloud很大的一部分是基于Spring Boot来实现，Spring Boot可以离开Spring Cloud独立使用开发项目， 但是Spring Cloud离不开Spring Boot，属于依赖的关系。  </li><li> SpringBoot在SpringClound中起到了承上启下的作用，如果你要学习SpringCloud必须要学习 SpringBoot。 </li></ul><p><img src="https://s1.ax1x.com/2022/05/08/O8pdq1.png"></p><blockquote><p>IOC的简介</p></blockquote><p> 想想以前所有东西都是由程序去进行控制创建 , 而现在是由我们自行控制创建对象 , 把主动权交给了调用者，程序不用去管怎么创建,怎么实现了它只负责提供一个接口这种思想 , 从本质上解决了问题 , 我们程序员不再去管理对象的创建了 , 更多的去关注业务的实现耦合性大大降低这也就是IOC的原型。</p><p><strong>本质：</strong>控制反转IoC(Inversion of Control)，是一种设计思想，DI(依赖注入)是实现IoC的一种方法，也有人认为DI只是IoC的另一种说法。没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。</p><p> <strong>IoC是Spring框架的核心内容</strong>，使用多种方式完美的实现了IoC，可以使用XML配置，也可以使用注解， 新版本的Spring也可以零配置实现IoC。 </p><p> Spring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再 从Ioc容器中取出需要的对象。  </p><p><img src="https://s1.ax1x.com/2022/05/09/O8ObdO.png"></p><p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一 体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。 控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。  <strong>明白IOC的思想，是理解Spring的核心技巧</strong> ！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring的学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring03：依赖注入（DI）</title>
      <link href="/2022/05/08/Spring03%EF%BC%9A%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%EF%BC%88DI%EF%BC%89/"/>
      <url>/2022/05/08/Spring03%EF%BC%9A%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%EF%BC%88DI%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring03：依赖注入（DI）"><a href="#Spring03：依赖注入（DI）" class="headerlink" title="Spring03：依赖注入（DI）"></a>Spring03：依赖注入（DI）</h1><blockquote><p>概念</p></blockquote><ul><li><p>依赖注入（Dependency Injection,DI）。</p></li><li><p> 依赖 : 指Bean对象的创建依赖于容器 . Bean对象的依赖资源 .  </p></li><li><p>注入 : 指Bean对象所依赖的资源 , 由容器来设置和装配 </p></li></ul><blockquote><p>构造器注入</p></blockquote><p>如Sping快速入手的案例</p><blockquote><p>Set注入（重点）</p></blockquote><p>要求被注入的属性 , 必须有set方法 , set方法的方法名由set + 属性首字母大写 , 如果属性是boolean类型 , 没 有set方法 , 是 is . </p><p>测试pojo类 : </p><p>Address.java  </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String address;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> address;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.address = address;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Student.java </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.pojo;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Address address;</span><br><span class="line"><span class="keyword">private</span> String[] books;</span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; hobbys;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line"><span class="keyword">private</span> String wife;</span><br><span class="line"><span class="keyword">private</span> Properties info;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(Address address)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.address = address;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBooks</span><span class="params">(String[] books)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.books = books;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHobbys</span><span class="params">(List&lt;String&gt; hobbys)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.hobbys = hobbys;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCard</span><span class="params">(Map&lt;String, String&gt; card)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.card = card;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGames</span><span class="params">(Set&lt;String&gt; games)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.games = games;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWife</span><span class="params">(String wife)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.wife = wife;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInfo</span><span class="params">(Properties info)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.info = info;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;name=&quot;</span>+ name</span><br><span class="line">+ <span class="string">&quot;,address=&quot;</span>+ address.getAddress()</span><br><span class="line">+ <span class="string">&quot;,books=&quot;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">for</span> (String book:books)&#123;</span><br><span class="line">System.out.print(<span class="string">&quot;&lt;&lt;&quot;</span>+book+<span class="string">&quot;&gt;&gt;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;\n爱好:&quot;</span>+hobbys);</span><br><span class="line">System.out.println(<span class="string">&quot;card:&quot;</span>+card);</span><br><span class="line">System.out.println(<span class="string">&quot;games:&quot;</span>+games);</span><br><span class="line">System.out.println(<span class="string">&quot;wife:&quot;</span>+wife);</span><br><span class="line">System.out.println(<span class="string">&quot;info:&quot;</span>+info);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 1、常量注入 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;student&quot; class=&quot;com.kuang.pojo.Student&quot;&gt;</span><br><span class="line">&lt;property name=&quot;name&quot; value=&quot;小明&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) context.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">System.out.println(student.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、Bean注入</p><p> 注意点：这里的值是一个引用，ref  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;addr&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;com.kuang.pojo.Address&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重庆&quot;</span>/&gt;</span></span></span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Student&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小明&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;addr&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>3、数组注入</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;student&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;com.kuang.pojo.Student&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小明&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;addr&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>4、List注入</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;property name=<span class="string">&quot;hobbys&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">value</span>&gt;</span>听歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">value</span>&gt;</span>爬山<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span></span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>5、Map注入</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;property name=<span class="string">&quot;card&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;中国邮政&quot;</span> <span class="attr">value</span>=<span class="string">&quot;456456456465456&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;建设&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1456682255511&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span></span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>6、set注入</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;property name=<span class="string">&quot;games&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">value</span>&gt;</span>BOB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">value</span>&gt;</span>COC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span></span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>7、Null注入</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;property name=<span class="string">&quot;wife&quot;</span>&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">null</span>/&gt;</span></span>&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>8、Properties注入</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;property name=<span class="string">&quot;info&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;学号&quot;</span>&gt;</span>20190604<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;性别&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span></span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><blockquote><p>P命名和c命名注入</p></blockquote><p>User.java：【注意：这里没有参构造器】</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line"><span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line"><span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line"><span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、P命名空间注入：需要在头文件中加入约束文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">导入约束 : <span class="attr">xmlns</span>:p=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="line">&lt;!--<span class="title function_">P</span>(属性: properties)命名空间 , 属性依然要设置set方法--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;狂神&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure><p>2、c命名空间注入：需要在头文件加入约束文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">导入约束 : <span class="attr">xmlns</span>:c=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span><br><span class="line">&lt;!--<span class="title function_">C</span>(构造: <span class="title class_">Constructor</span>)命名空间 , 属性依然要设置set方法--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;狂神&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure><p> 发现问题：爆红了，刚才我们没有写有参构造！ 解决：把有参构造器加上，这里也能知道，c 就是所谓的构造器注入！  </p><p>测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Bean作用域</p></blockquote><p> 在Spring中，那些组成应用程序的主体及由Spring IoC容器所管理的对象，被称之为bean。简单地讲，bean 就是由IoC容器初始化、装配及管理的对象 . </p><p><img src="https://s1.ax1x.com/2022/05/11/OU3TdH.png"></p><p> 几种作用域中，request、session作用域仅在基于web的应用中使用（不必关心你所采用的是什么web应用 框架），只能用在基于web的Spring ApplicationContext环境。 </p><p> <strong>Singleton</strong>  </p><p> 当一个bean的作用域为Singleton，那么Spring IoC容器中只会存在一个共享的bean实例，并且所有对bean 的请求，只要id与该bean定义相匹配，则只会返回bean的同一实例。Singleton是单例类型，就是在创建起 容器时就同时自动创建了一个bean的对象，不管你是否使用，他都存在了，每次获取到的对象都是同一个对 象。注意，Singleton作用域是Spring中的缺省作用域。要在XML中将bean定义成singleton，可以这样配置：  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;ServiceImpl&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;cn.csdn.service.ServiceImpl&quot;</span> scope=<span class="string">&quot;singleton&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p> <strong>Prototype</strong>  </p><p> 当一个bean的作用域为Prototype，表示一个bean定义对应多个对象实例。Prototype作用域的bean会导致在 每次对该bean请求（将其注入到另一个bean中，或者以程序的方式调用容器的getBean()方法）时都会创建 一个新的bean实例。Prototype是原型类型，它在我们创建容器的时候并没有实例化，而是当我们获取bean 的时候才会去创建一个对象，而且我们每次获取到的对象都不是同一个对象。根据经验，对有状态的bean应 该使用prototype作用域，而对无状态的bean则应该使用singleton作用域。在XML中将bean定义成 prototype，可以这样配置： </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;account&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;com.foo.DefaultAccount&quot;</span> scope=<span class="string">&quot;prototype&quot;</span>/&gt;</span><br><span class="line">或者</span><br><span class="line">&lt;bean id=<span class="string">&quot;account&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;com.foo.DefaultAccount&quot;</span> singleton=<span class="string">&quot;false&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p> <strong>Request</strong>  </p><p> 当一个bean的作用域为Request，表示在一次HTTP请求中，一个bean定义对应一个实例；即每个HTTP请求 都会有各自的bean实例，它们依据某个bean定义创建而成。该作用域仅在基于web的Spring ApplicationContext情形下有效。考虑下面bean定义：  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;loginAction&quot;</span> <span class="keyword">class</span>=cn.<span class="property">csdn</span>.<span class="property">LoginAction</span><span class="string">&quot; scope=&quot;</span>request<span class="string">&quot;/&gt;</span></span><br></pre></td></tr></table></figure><p> 针对每次HTTP请求，Spring容器会根据loginAction bean的定义创建一个全新的LoginAction bean实例，且 该loginAction bean实例仅在当前HTTP request内有效，因此可以根据需要放心的更改所建实例的内部状 态，而其他请求中根据loginAction bean定义创建的实例，将不会看到这些特定于某个请求的状态变化。当 处理请求结束，request作用域的bean实例将被销毁。 </p><p> <strong>Session</strong> </p><p> 当一个bean的作用域为Session，表示在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅 在基于web的Spring ApplicationContext情形下有效。考虑下面bean定义：  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;userPreferences&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;com.foo.UserPreferences&quot;</span> scope=<span class="string">&quot;session&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p> 针对某个HTTP Session，Spring容器会根据userPreferences bean定义创建一个全新的userPreferences bean实例，且该userPreferences bean仅在当前HTTP Session内有效。与request作用域一样，可以根据需 要放心的更改所创建实例的内部状态，而别的HTTP Session中根据userPreferences创建的实例，将不会看 到这些特定于某个HTTP Session的状态变化。当HTTP Session最终被废弃的时候，在该HTTP Session作用 域内的bean也会被废弃掉。 </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring的学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring02：快速上手Spring</title>
      <link href="/2022/05/08/Spring02%EF%BC%9A%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BSpring/"/>
      <url>/2022/05/08/Spring02%EF%BC%9A%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BSpring/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring02：快速上手Spring"><a href="#Spring02：快速上手Spring" class="headerlink" title="Spring02：快速上手Spring"></a>Spring02：快速上手Spring</h1><p>首先根据学习经验来说说，该如何快速上手Spring。</p><h2 id="HelloSpring"><a href="#HelloSpring" class="headerlink" title="HelloSpring"></a>HelloSpring</h2><blockquote><p>第一步：导入依赖（Jar包）</p></blockquote><p> 注 : spring 需要导入commons-logging进行日志记录 . 我们利用maven , 他会自动下载对应的依赖项 . [根据官网的指导]</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>编写代码</p></blockquote><ol><li><p>编写一个Hello实体类</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">private <span class="title class_">String</span> name;</span><br><span class="line">public <span class="title class_">String</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">public <span class="keyword">void</span> <span class="title function_">setName</span>(<span class="params"><span class="built_in">String</span> name</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line">public <span class="keyword">void</span> <span class="title function_">show</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;Hello,&quot;</span>+ name );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写Spring配置文件，并命名为beans.xml</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--bean就是java对象 , 由Spring创建和管理--&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Hello&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//解析beans.xml文件 , 生成管理相应的Bean对象</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="comment">//getBean : 参数即为spring配置文件中bean的id .</span></span><br><span class="line"><span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> (Hello) context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">hello.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>思考</p></blockquote><ul><li><p> Hello 对象是谁创建的 ? 【hello 对象是由Spring创建的 </p></li><li><p> Hello 对象的属性是怎么设置的 ? hello 对象的属性是由Spring容器设置的 这个过程就叫控制反转  </p></li><li><p> 控制 : 谁来控制对象的创建 , 传统应用程序的对象是由程序本身控制创建的 , 使用Spring后 , 对象是由 Spring来创建的 </p></li><li><p>反转 : 程序本身不创建对象 , 而变成被动的接收对象 .  </p><p> 依赖注入 : 就是利用set方法来进行注入的.  </p><p> IOC是一种编程思想，由主动的编程变成被动的接收 </p><p> 可以通过newClassPathXmlApplicationContext去浏览一下底层源码 . </p></li></ul><blockquote><p>修改案例一</p></blockquote><p> 我们在案例一中， 新增一个Spring配置文件beans.xml </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;MysqlImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.dao.impl.UserDaoMySqlImpl&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;OracleImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.dao.impl.UserDaoOracleImpl&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.service.impl.UserServiceImpl&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--注意: 这里的name并不是属性 , 而是set方法后面的那部分 , 首字母小写--&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--引用另外一个bean , 不是用value 而是用 ref--&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;OracleImpl&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="type">UserServiceImpl</span> <span class="variable">serviceImpl</span> <span class="operator">=</span> (UserServiceImpl) context.getBean(<span class="string">&quot;ServiceImpl&quot;</span>);</span><br><span class="line">serviceImpl.getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> OK , 到了现在 , 我们彻底不用再程序中去改动了 , 要实现不同的操作 , 只需要在xml配置文件中进行修改 , 所 谓的IoC,一句话搞定 : 对象由Spring 来创建 , 管理 , 装配 ！</p><p><strong>IOC创建对象方式</strong></p><hr><blockquote><p>通过无参构造方法来创建</p></blockquote><ol><li><p>User.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;user无参构造方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;name=&quot;</span>+ name );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>beans.xml</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;kuangshen&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="comment">//在执行getBean的时候, user已经创建好了 , 通过无参构造</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="comment">//调用对象的方法 .</span></span><br><span class="line">user.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 结果可以发现，在调用show方法之前，User对象已经通过无参构造初始化了！  </p></li></ol><blockquote><p>通过有参构造方法来创建</p></blockquote><ol><li><p>UserT.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserT</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">UserT</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;name=&quot;</span>+ name );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> beans.xml 有三种方式编写 </p></li></ol>   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 第一种根据index参数下标设置 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.UserT&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- index指构造方法 , 下标从0开始 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;kuangshen2&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure>   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 第二种根据参数名字设置 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.UserT&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- name指参数名 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;kuangshen2&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure>   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 第三种根据参数类型设置 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.UserT&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;kuangshen2&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testT</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="type">UserT</span> <span class="variable">user</span> <span class="operator">=</span> (UserT) context.getBean(<span class="string">&quot;userT&quot;</span>);</span><br><span class="line">user.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p> 结论：在配置文件加载的时候。其中管理的对象都已经初始化了！ </p><p><strong>Spring配置</strong></p><hr><blockquote><p>别名</p></blockquote><p> alias 设置别名 , 为bean设置别名 , 可以设置多个别名 </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!--设置别名：在获取<span class="title class_">Bean</span>的时候可以使用别名获取--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;userT&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;userNew&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>Bean的配置</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!--bean就是java对象,由<span class="title class_">Spring</span>创建和管理--&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">id 是bean的标识符,要唯一,如果没有配置id,name就是默认标识符</span><br><span class="line">如果配置id,又配置了name,那么name是别名</span><br><span class="line">name可以设置多个别名,可以用逗号,分号,空格隔开</span><br><span class="line">如果不配置id和name,可以根据applicationContext.<span class="title function_">getBean</span>(.<span class="property">class</span>)获取对象;</span><br><span class="line"><span class="keyword">class</span>是bean的全限定名=包名+类名</span><br><span class="line">--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hello2 h2,h3;h4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Hello&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>Import</p></blockquote><p> 团队的合作通过import来实现 .  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">import</span> resource=<span class="string">&quot;&#123;path&#125;/beans.xml&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring的学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring04：自动装配</title>
      <link href="/2022/05/08/Spring04%EF%BC%9A%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
      <url>/2022/05/08/Spring04%EF%BC%9A%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring04：自动装配"><a href="#Spring04：自动装配" class="headerlink" title="Spring04：自动装配"></a>Spring04：自动装配</h1><blockquote><p> 自动装配说明 </p></blockquote><ul><li> 自动装配是使用spring满足bean依赖的一种方法 </li><li> spring会在应用上下文中为某个bean寻找其依赖的bean。 </li></ul><p> Spring中bean有三种装配机制，分别是： </p><ol><li> 在xml中显式配置； </li><li> 在java中显式配置； </li><li> 隐式的bean发现机制和自动装配。 【自动装配为主！】</li></ol><p> 这里我们主要讲第三种：自动化的装配bean。 </p><p> Spring的自动装配需要从两个角度来实现，或者说是两个操作： </p><ol><li>  组件扫描(component scanning)：spring会自动发现应用上下文中所创建的bean； </li><li> 自动装配(autowiring)：spring自动满足bean之间的依赖，也就是我们说的IoC/DI； </li></ol><p> 组件扫描和自动装配组合发挥巨大威力，使得显示的配置降低到最少。 <strong>推荐不使用自动装配xml配置 , 而使用注解。</strong>  </p><blockquote><p> 测试环境搭建 </p></blockquote><p>此次省略了自动装配的操作，直接使用最常用的<strong>注解注入</strong>！</p><ol><li><p> 新建一个项目</p></li><li><p> 新建两个实体类，Cat Dog 都有一个叫的方法 </p></li></ol>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>-Cat</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;miao~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>-Dog</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;wang~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><ol start="3"><li> 新建一个用户类 User  </li></ol>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br><span class="line"><span class="keyword">private</span> String str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li> 编写Spring配置文件 </li></ol>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;dog&quot;</span> class=<span class="string">&quot;com.kuang.pojo.Dog&quot;</span>/&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;cat&quot;</span> class=<span class="string">&quot;com.kuang.pojo.Cat&quot;</span>/&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;user&quot;</span> class=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;cat&quot;</span> ref=<span class="string">&quot;cat&quot;</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;dog&quot;</span> ref=<span class="string">&quot;dog&quot;</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;str&quot;</span> value=<span class="string">&quot;qinjiang&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMethodAutowire</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">user.getCat().shout();</span><br><span class="line">user.getDog().shout();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">正常输出则，环境搭建成功！</span><br></pre></td></tr></table></figure></li></ol><hr><blockquote><p>使用注解来注入（装配）</p></blockquote><p> jdk1.5开始支持注解，spring2.5开始全面支持注解。</p><p> 准备工作：利用注解的方式注入属性。 </p><ol><li> 在spring配置文件中引入context文件头 </li></ol>   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">http://www.springframework.org/schema/context</span><br><span class="line">http://www.springframework.org/schema/context/spring-context.xsd</span><br></pre></td></tr></table></figure><ol start="2"><li> 开启属性注解支持！ </li></ol>   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a><strong>@Autowired</strong></h2><ul><li> @Autowired是<strong>按类型</strong>自动转配的，不支持id匹配。 </li><li> 需要导入 spring-aop的包！ </li></ul><p> 测试： </p><ol><li> 将User类中的set方法去掉，使用@Autowired注解 </li></ol>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br><span class="line"><span class="keyword">private</span> String str;</span><br><span class="line"><span class="keyword">public</span> Cat <span class="title function_">getCat</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> cat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Dog <span class="title function_">getDog</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dog;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getStr</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li> 此时配置文件内容 </li></ol>   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><p>测试，成功输出结果！ </p><p> @Autowired(required=false) 说明：false，对象可以为null；true，对象必须存对象，不能为null。  </p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果允许对象为null，设置required = false,默认为true</span></span><br><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br></pre></td></tr></table></figure><h2 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h2><ul><li> @Autowired是根据类型自动装配的，加上@Qualifier则可以根据byName的方式自动装配  </li><li> @Qualifier不能单独使用。 </li></ul><p> 测试 :</p><ol><li> 配置文件修改内容，保证类型存在对象。且名字不为类的默认名字！ </li></ol>   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Cat&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p> 没有加Qualifier测试，直接报错 </p></li><li><p>在属性上添加Qualifier注解 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(value = &quot;cat2&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(value = &quot;dog2&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure></li><li><p> 测试，成功输出！  </p></li></ol><h2 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h2><ul><li> @Resource如有指定的name属性，先按该属性进行byName方式查找装配； </li><li> 其次再进行默认的byName方式进行装配； </li><li> 如果以上都不成功，则按byType的方式自动装配。 </li><li> 都不成功，则报异常。 </li></ul><p> <strong>实体类：</strong> </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="comment">//如果允许对象为null，设置required = false,默认为true</span></span><br><span class="line"><span class="meta">@Resource(name = &quot;cat2&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br><span class="line"><span class="keyword">private</span> String str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>beans.xml</strong>  </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.User/&gt;</span></span></span><br></pre></td></tr></table></figure><p> <strong>测试：结果OK</strong> </p><p> <strong>配置文件2：beans.xml ， 删掉cat2</strong> </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Cat&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>实体类上只保留注解</strong> </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><p> <strong>结果：OK</strong> </p><p> <strong>结论：先进行byName查找，失败；再进行byType查找，成功。</strong> </p><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><h3 id="Autowired与-Resource异同："><a href="#Autowired与-Resource异同：" class="headerlink" title="@Autowired与@Resource异同："></a>@Autowired与@Resource异同：</h3><ol><li> @Autowired与@Resource都可以用来装配bean。都可以写在字段上，或写在setter方法上。  </li><li> @Autowired默认按类型装配（属于spring规范），默认情况下必须要求依赖对象必须存在，如果要允许null 值，可以设置它的required属性为false,如：@Autowired(required=false) ，如果我们想使用名称装配可以结合@Qualifier注解进行使用 </li><li> @Resource（属于J2EE复返），默认按照名称进行装配，名称可以通过name属性进行指定。如果没有指定name属性，当注解写在字段上时，默认取字段名进行按照名称查找，如果注解写在setter方法上默认 取属性名进行装配。当找不到与名称匹配的bean时才按照类型进行装配。但是需要注意的是，如果name属 性一旦指定，就只会按照名称进行装配。 </li></ol><p> <strong>它们的作用相同都是用注解方式注入对象，但执行顺序不同。@Autowired先byType，@Resource先 byName。</strong> </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring的学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring05：使用注解开发</title>
      <link href="/2022/05/08/Spring05%EF%BC%9A%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/"/>
      <url>/2022/05/08/Spring05%EF%BC%9A%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring05：使用注解开发"><a href="#Spring05：使用注解开发" class="headerlink" title="Spring05：使用注解开发"></a>Spring05：使用注解开发</h1><blockquote><p> 说明 </p></blockquote><p> 在spring4之后，想要使用注解形式，必须得要引入aop的包  </p><p><img src="https://s1.ax1x.com/2022/05/17/OIixSS.png"></p><p> 在配置文件当中，还得要引入一个context约束 </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p> Bean的实现 </p></blockquote><p> 我们之前都是使用 <strong>bean</strong> 的标签进行<strong>bean注入</strong>，但是实际开发中，我们一般都会使用注解！  </p><ol><li> 配置扫描哪些包下的注解 </li></ol>   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定注解扫描包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.pojo&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li> 在指定包下编写类，增加注解 </li></ol>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;user&quot;)</span></span><br><span class="line"><span class="comment">// 相当于配置文件中 &lt;bean id=&quot;user&quot; class=&quot;当前注解的类&quot;/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;秦疆&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li> 测试 </li></ol>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) applicationContext.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">System.out.println(user.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 属性注入 </p></blockquote><p> 使用注解注入属性 1、可以不用提供set方法，直接在直接名 </p><ol><li> 可以不用提供set方法，直接在直接名上添加@value(“值”) </li></ol>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;user&quot;)</span></span><br><span class="line"><span class="comment">// 相当于配置文件中 &lt;bean id=&quot;user&quot; class=&quot;当前注解的类&quot;/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="meta">@Value(&quot;秦疆&quot;)</span></span><br><span class="line"><span class="comment">// 相当于配置文件中 &lt;property name=&quot;name&quot; value=&quot;秦疆&quot;/&gt;</span></span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li> 如果提供了set方法，在set方法上添加@value(“值”); </li></ol>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="meta">@Value(&quot;小陈&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 衍生注解 </p></blockquote><p> 我们这些注解，就是替代了在配置文件当中配置步骤而已！更加的方便快捷！ </p><p> <strong>@Component</strong>三个衍生注解 [ @Component为最平常的注入方法 ]</p><p> 为了更好的进行分层，Spring可以使用其它三个注解，功能一样，目前使用哪一个功能都一样。 </p><ul><li><p> @Controller：web层 </p></li><li><p> @Service：service层 </p></li></ul><p>  该注解大多数 @Service( “名称” ) 在controller中调用可直接通过名称来调用。</p><ul><li> @Repository：dao层 </li></ul><p> <strong>写上这些注解，就相当于将这个类交给Spring管理装配了！</strong> </p><blockquote><p> 自动装配注解 </p></blockquote><p> 在Bean的自动装配已经讲过了，可以回顾！ </p><blockquote><p> 作用域 </p></blockquote><p> <strong>@scope</strong>  </p><ul><li> singleton：默认的，Spring会采用单例模式创建这个对象。关闭工厂 ，所有的对象都会销毁。  </li><li> prototype：多例模式。关闭工厂 ，所有的对象不会销毁。内部的垃圾回收机制会回收 </li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;user&quot;)</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="meta">@Value(&quot;秦疆&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小结</p></blockquote><p> XML与注解比较 </p><ul><li> XML可以适用任何场景 ，结构清晰，维护方便 </li><li> 注解不是自己提供的类使用不了，开发简单方便 </li></ul><p> xml与注解整合开发 ：推荐最佳实践 </p><ul><li> xml管理Bean </li><li> 注解完成属性注入 </li><li> 使用过程中， 可以不用扫描，扫描是为了类上的注解 </li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure><p> 作用： </p><ul><li> 进行注解驱动注册，从而使注解生效 </li><li> 用于激活那些已经在spring容器里注册过的bean上面的注解，也就是显示的向Spring注册 </li><li> 如果不扫描包，就需要手动配置bean  </li><li> 如果不加注解驱动，则注入的值为null！ </li></ul><blockquote><p> 基于Java类进行配置 </p></blockquote><p> JavaConfig 原来是 Spring 的一个子项目，它通过 Java 类的方式提供 Bean 的定义信息，在 Spring4 的版 本， JavaConfig 已正式成为 Spring4 的核心功能 。 </p><p> 测试：  </p><ol><li> 编写一个实体类，Dog </li></ol>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//将这个类标注为Spring的一个组件，放到容器中！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;dog&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li> 新建一个config配置包，编写一个MyConfig配置类 </li></ol>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//代表这是一个配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span> <span class="comment">//通过方法注册一个bean，这里的返回值就Bean的类型，方法名就是bean的id！</span></span><br><span class="line"><span class="keyword">public</span> Dog <span class="title function_">dog</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li> 测试 </li></ol>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(MyConfig.class);</span><br><span class="line"><span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) applicationContext.getBean(<span class="string">&quot;dog&quot;</span>);</span><br><span class="line">System.out.println(dog.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li> 成功输出结果！ </li></ol><p> 导入其他配置如何做呢？  </p><ol><li> 我们再编写一个配置类！ </li></ol>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//代表这是一个配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig2</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li> 在之前的配置类中我们来选择导入这个配置类 </li></ol>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(MyConfig2.class)</span> <span class="comment">//导入合并其他配置类，类似于配置文件中的 inculde 标签</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Dog <span class="title function_">dog</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>关于这种Java类的配置方式，我们在之后的SpringBoot 和 SpringCloud中还会大量看到，我们需要知道这些 注解的作用即可！ </code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring的学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring06：静态/动态代理模式</title>
      <link href="/2022/05/08/Spring06%EF%BC%9A%E9%9D%99%E6%80%81%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/05/08/Spring06%EF%BC%9A%E9%9D%99%E6%80%81%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring06：静态-动态代理模式"><a href="#Spring06：静态-动态代理模式" class="headerlink" title="Spring06：静态/动态代理模式"></a>Spring06：静态/动态代理模式</h1><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>为什么要学习代理模式，因为AOP的底层机制就是动态代理！ </p><p>代理模式：  </p><ul><li> 静态代理 </li><li> 动态代理 </li></ul><p> 学习aop之前 , 我们要先了解一下代理模式！ </p><p><img src="https://s1.ax1x.com/2022/05/17/OIVAHJ.png"></p><blockquote><p> 静态代理 </p></blockquote><p> 静态代理角色分析 </p><ul><li> 抽象角色 : 一般使用接口或者抽象类来实现  </li><li> 真实角色 : 被代理的角色 </li><li> 代理角色 : 代理真实角色 ; 代理真实角色后 , 一般会做一些附属的操作 </li><li> 客户 : 使用代理角色来进行一些操作 . </li></ul><p> 代码实现 </p><p> <strong>Rent . java 即抽象角色</strong>  </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象角色：租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>Host . java 即真实角色</strong> </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//真实角色: 房东，房东要出租房子</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Host</span> <span class="keyword">implements</span> <span class="title class_">Rent</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;房屋出租&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>Proxy . java 即代理角色</strong> </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代理角色：中介</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Host host;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">(Host host)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.host = host;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span>&#123;</span><br><span class="line">seeHouse();</span><br><span class="line">host.rent();</span><br><span class="line">fare();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//看房</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seeHouse</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;带房客看房&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//收中介费</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fare</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;收中介费&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>Client . java 即客户</strong> </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户类，一般客户都会去找代理！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//房东要租房</span></span><br><span class="line"><span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Host</span>();</span><br><span class="line"><span class="comment">//中介帮助房东</span></span><br><span class="line"><span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(host);</span><br><span class="line"><span class="comment">//你去找中介！</span></span><br><span class="line">proxy.rent();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 分析：在这个过程中，你直接接触的就是中介，就如同现实生活中的样子，你看不到房东，但是你依旧租到 了房东的房子通过代理，这就是所谓的代理模式，程序源自于生活，所以学编程的人，一般能够更加抽象的 看待生活中发生的事情。 </p><p> <strong>静态代理的好处:</strong>  </p><ul><li> 可以使得我们的真实角色更加纯粹 . 不再去关注一些公共的事情 .  </li><li> 公共的业务由代理来完成 . 实现了业务的分工 , </li><li> 公共业务发生扩展时变得更加集中和方便 . </li></ul><hr><p><strong>静态代理的缺点:</strong>  </p><ul><li> 类多了 , 多了代理类 , 工作量变大了 . 开发效率降低 </li></ul><p> 我们想要静态代理的好处，又不想要静态代理的缺点，所以 , 就有了动态代理  </p><blockquote><p> 静态代理再理解 </p></blockquote><p> 同学们练习完毕后，我们再来举一个例子，巩固大家的学习！ </p><p> 练习步骤： </p><ol><li> 创建一个抽象角色，比如咋们平时做的用户业务，抽象起来就是增删改查！ </li></ol>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象角色：增删改查业务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li> 我们需要一个真实对象来完成这些增删改查操作 </li></ol>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//真实对象，完成增删改查操作的人</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;增加了一个用户&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;删除了一个用户&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;更新了一个用户&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;查询了一个用户&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li> 需求来了，现在我们需要增加一个日志功能，怎么实现！ </li></ol><ul><li> 思路1 ：在实现类上增加代码 【麻烦！】 </li><li> 思路2：使用代理来做，能够不改变原来的业务情况下，实现此功能就是最好的了！ </li></ul><ol start="4"><li> 设置一个代理类来处理日志！代理角色 </li></ol>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代理角色，在这里面增加日志的实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"><span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserService</span><span class="params">(UserServiceImpl userService)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.userService = userService;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">log(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">userService.add();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">log(<span class="string">&quot;delete&quot;</span>);</span><br><span class="line">userService.delete();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">log(<span class="string">&quot;update&quot;</span>);</span><br><span class="line">userService.update();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line">log(<span class="string">&quot;query&quot;</span>);</span><br><span class="line">userService.query();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;执行了&quot;</span>+msg+<span class="string">&quot;方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li> 测试访问类： </li></ol>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//真实业务</span></span><br><span class="line"><span class="type">UserServiceImpl</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="type">UserServiceProxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceProxy</span>();</span><br><span class="line"><span class="comment">//使用代理类实现日志功能！</span></span><br><span class="line">proxy.setUserService(userService);</span><br><span class="line">proxy.add();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> OK，到了现在代理模式大家应该都没有什么问题了，重点大家需要理解其中的思想； </p><p>我们在不改变原来的代码的情况下，实现了对原有功能的增强，这是AOP中最核心的思想 </p><p>聊聊AOP：纵向开发，横向开发 </p><blockquote><p> 动态代理 </p></blockquote><ul><li> 动态代理的角色和静态代理的一样 </li><li> 动态代理的代理类是动态生成的 . 静态代理的代理类是我们提前写好的 </li><li> 动态代理分为两类 : 一类是基于接口动态代理 , 一类是基于类的动态代理 </li><li> 基于接口的动态代理—-JDK动态代理 </li><li> 基于类的动态代理–cglib </li><li> 现在用的比较多的是 javasist 来生成动态代理 . 百度一下javasist </li><li> 我们这里使用JDK的原生代码来实现，其余的道理都是一样的！、 </li></ul><p> JDK的动态代理需要了解两个类 </p><p> <strong>核心 : InvocationHandler 和 Proxy</strong> ， 打开JDK帮助文档看看 </p><p> 【InvocationHandler：调用处理程序】  </p><p><img src="https://s1.ax1x.com/2022/05/17/OIVVE9.png"></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Object invoke(Object proxy, 方法 method, Object[] args)；</span><br><span class="line">//参数</span><br><span class="line">//proxy - 调用该方法的代理实例</span><br><span class="line">//method -所述方法对应于调用代理实例上的接口方法的实例。方法对象的声明类将是该方法声明的接口，它可以是代</span><br><span class="line">理类继承该方法的代理接口的超级接口。</span><br><span class="line">//args -包含的方法调用传递代理实例的参数值的对象的阵列，或null如果接口方法没有参数。原始类型的参数包含在</span><br><span class="line">适当的原始包装器类的实例中，例如java.lang.Integer或java.lang.Boolean 。</span><br></pre></td></tr></table></figure><p> 【Proxy : 代理】  </p><p><img src="https://s1.ax1x.com/2022/05/17/OIVkB4.png"></p><p><img src="https://s1.ax1x.com/2022/05/17/OIVZNR.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生成代理类</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(<span class="built_in">this</span>.getClass().getClassLoader(),</span><br><span class="line">rent.getClass().getInterfaces(),<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 代码实现 </p><p> 抽象角色和真实角色和之前的一样！  </p><p> <strong>Rent . java 即抽象角色</strong> </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象角色：租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>Host . java 即真实角色</strong>  </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//真实角色: 房东，房东要出租房子</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Host</span> <span class="keyword">implements</span> <span class="title class_">Rent</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;房屋出租&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>ProxyInvocationHandler. java 即代理角色</strong>  </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Rent rent;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRent</span><span class="params">(Rent rent)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.rent = rent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成代理类，重点是第二个参数，获取要代理的抽象角色！之前都是一个角色，现在可以代理一类角色</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(<span class="built_in">this</span>.getClass().getClassLoader(),</span><br><span class="line">rent.getClass().getInterfaces(),<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// proxy : 代理类 method : 代理类的调用处理程序的方法对象.</span></span><br><span class="line"><span class="comment">// 处理代理实例上的方法调用并返回结果</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">seeHouse();</span><br><span class="line"><span class="comment">//核心：本质利用反射实现！</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(rent, args);</span><br><span class="line">fare();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//看房</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seeHouse</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;带房客看房&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//收中介费</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fare</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;收中介费&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>Client . java</strong> </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//租客</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//真实角色</span></span><br><span class="line"><span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Host</span>();</span><br><span class="line"><span class="comment">//代理实例的调用处理程序</span></span><br><span class="line"><span class="type">ProxyInvocationHandler</span> <span class="variable">pih</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyInvocationHandler</span>();</span><br><span class="line">pih.setRent(host); <span class="comment">//将真实角色放置进去！</span></span><br><span class="line"><span class="type">Rent</span> <span class="variable">proxy</span> <span class="operator">=</span> (Rent)pih.getProxy(); <span class="comment">//动态生成对应的代理类！</span></span><br><span class="line">proxy.rent();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 核心：一个动态代理 , 一般代理某一类业务 , 一个动态代理可以代理多个类，代理的是接口！、 </p><blockquote><p> 深化理解 </p></blockquote><p> 我们来使用动态代理实现代理我们后面写的UserService！ </p><p> 我们也可以编写一个通用的动态代理实现的类！所有的代理对象设置为Object即可！ </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Object target;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTarget</span><span class="params">(Object target)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成代理类</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(<span class="built_in">this</span>.getClass().getClassLoader(),</span><br><span class="line">target.getClass().getInterfaces(),<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// proxy : 代理类</span></span><br><span class="line"><span class="comment">// method : 代理类的调用处理程序的方法对象.</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">log(method.getName());</span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String methodName)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;执行了&quot;</span>+methodName+<span class="string">&quot;方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 测试！ </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//真实对象</span></span><br><span class="line"><span class="type">UserServiceImpl</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line"><span class="comment">//代理对象的调用处理程序</span></span><br><span class="line"><span class="type">ProxyInvocationHandler</span> <span class="variable">pih</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyInvocationHandler</span>();</span><br><span class="line">pih.setTarget(userService); <span class="comment">//设置要代理的对象</span></span><br><span class="line"><span class="type">UserService</span> <span class="variable">proxy</span> <span class="operator">=</span> (UserService)pih.getProxy(); <span class="comment">//动态生成代理类！</span></span><br><span class="line">proxy.delete();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 测试，增删改查，查看结果！  </p><blockquote><p> 动态代理的好处 </p></blockquote><p> 静态代理有的它都有，静态代理没有的，它也有！ </p><ul><li> 可以使得我们的真实角色更加纯粹 . 不再去关注一些公共的事情 . </li><li>公共的业务由代理来完成 . 实现了业务的分工 , </li><li>公共业务发生扩展时变得更加集中和方便 . </li><li>一个动态代理 , 一般代理某一类业务 </li><li>一个动态代理可以代理多个类，代理的是接口！ </li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring的学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring07：AOP就这么简单</title>
      <link href="/2022/05/08/Spring07%EF%BC%9AAOP%E5%B0%B1%E8%BF%99%E4%B9%88%E7%AE%80%E5%8D%95/"/>
      <url>/2022/05/08/Spring07%EF%BC%9AAOP%E5%B0%B1%E8%BF%99%E4%B9%88%E7%AE%80%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring07：AOP就这么简单"><a href="#Spring07：AOP就这么简单" class="headerlink" title="Spring07：AOP就这么简单"></a>Spring07：AOP就这么简单</h1><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><blockquote><p> 什么是AOP </p></blockquote><p> AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序 功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要 内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各 部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。  </p><p><img src="https://s1.ax1x.com/2022/05/17/OImGE4.png"></p><blockquote><p> Aop在Spring中的作用  </p></blockquote><p> 提供声明式事务；允许用户自定义切面 </p><p>以下名词需要了解下： </p><ul><li> 横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注 的部分，就是横切关注点。如日志 , 安全 , 缓存 , 事务等等 …. </li><li> 切面（ASPECT）：横切关注点 被模块化 的特殊对象。即，它是一个类。 </li><li> 通知（Advice）：切面必须要完成的工作。即，它是类中的一个方法。 </li><li>目标（Target）：被通知对象。 </li><li>代理（Proxy）：向目标对象应用通知之后创建的对象。 </li><li>切入点（PointCut）：切面通知 执行的 “地点”的定义。 </li><li>连接点（JointPoint）：与切入点匹配的执行点。 </li></ul><p><img src="https://s1.ax1x.com/2022/05/17/OIm3bF.png"></p><p> SpringAOP中，通过Advice定义横切逻辑，Spring中支持5种类型的Advice:  </p><p><img src="https://s1.ax1x.com/2022/05/17/OImJUJ.png"></p><p> 即 Aop 在 不改变原有代码的情况下 , 去增加新的功能 </p><blockquote><p> 使用Spring实现Aop </p></blockquote><p> 【重点】使用AOP织入，需要导入一个依赖包！  </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>第一种方式</strong> </p><p>通过 Spring API 实现 </p><p>首先编写我们的业务接口和实现类 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">search</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;增加用户&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;删除用户&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;更新用户&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">search</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;查询用户&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 然后去写我们的增强类 , 我们编写两个 , 一个前置增强 一个后置增强 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Log</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span> &#123;</span><br><span class="line"><span class="comment">//method : 要执行的目标对象的方法</span></span><br><span class="line"><span class="comment">//objects : 被调用的方法的参数</span></span><br><span class="line"><span class="comment">//Object : 目标对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] objects, Object o)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">System.out.println( o.getClass().getName() + <span class="string">&quot;的&quot;</span> + method.getName() + <span class="string">&quot;方法被执行了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AfterLog</span> <span class="keyword">implements</span> <span class="title class_">AfterReturningAdvice</span> &#123;</span><br><span class="line"><span class="comment">//returnValue 返回值</span></span><br><span class="line"><span class="comment">//method被调用的方法</span></span><br><span class="line"><span class="comment">//args 被调用的方法的对象的参数</span></span><br><span class="line"><span class="comment">//target 被调用的目标对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object</span></span><br><span class="line"><span class="params">target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;执行了&quot;</span> + target.getClass().getName()</span><br><span class="line">+<span class="string">&quot;的&quot;</span>+method.getName()+<span class="string">&quot;方法,&quot;</span></span><br><span class="line">+<span class="string">&quot;返回值：&quot;</span>+returnValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 最后去spring的文件中注册 , 并实现aop切入实现 , 注意导入约束  </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.log.Log&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--aop的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--切入点 expression:表达式匹配要执行的方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(*</span></span></span><br><span class="line"><span class="string"><span class="tag">com.kuang.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--执行环绕; advice-ref执行方法 . pointcut-ref切入点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 测试 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">userService.search();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Aop的重要性 : 很重要 . 一定要理解其中的思路 , 主要是思想的理解这一块  </p><p> Spring的Aop就是将公共的业务 (日志 , 安全等) 和领域业务结合起来 , 当执行领域业务时 , 将会把公共业务加 进来 . 实现公共业务的重复利用 . 领域业务更纯粹 , 程序猿专注领域业务 , 其本质还是动态代理 </p><p> <strong>第二种方式</strong> </p><p>自定义类来实现Aop  </p><p>目标业务类不变依旧是userServiceImpl </p><p>第一步 : 写我们自己的一个切入类  </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiyPointcut</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;---------方法执行前---------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;---------方法执行后---------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 去spring中配置 </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二种方式自定义实现--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.config.DiyPointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--aop的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第二种方式：使用AOP的标签实现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;diyPonitcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(*</span></span></span><br><span class="line"><span class="string"><span class="tag">com.kuang.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;diyPonitcut&quot;</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;diyPonitcut&quot;</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 测试： </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">userService.add();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>第三种方式</strong> </p><p> 使用注解实现 ！！！</p><p> 第一步：编写一个注解实现的增强类  </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.config;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationPointcut</span> &#123;</span><br><span class="line"><span class="meta">@Before(&quot;execution(* com.kuang.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;---------方法执行前---------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@After(&quot;execution(* com.kuang.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;---------方法执行后---------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Around(&quot;execution(* com.kuang.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;环绕前&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;签名:&quot;</span>+jp.getSignature());</span><br><span class="line"><span class="comment">//执行目标方法proceed</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> jp.proceed();</span><br><span class="line">System.out.println(<span class="string">&quot;环绕后&quot;</span>);</span><br><span class="line">System.out.println(proceed);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 第二步：在Spring配置文件中，注册bean，并增加支持注解的配置 </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第三种方式:注解实现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationPointcut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.config.AnnotationPointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure><p> aop:aspectj-autoproxy：说明  </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">通过aop命名空间的<span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span>声明自动为spring容器中那些配置@aspectJ切面的bean创建代</span><br><span class="line">理，织入切面。当然，spring 在内部依旧采用AnnotationAwareAspectJAutoProxyCreator进行自动代理的创建工</span><br><span class="line">作，但具体实现的细节已经被<span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span>隐藏起来了</span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span>有一个proxy-target-class属性，默认为false，表示使用jdk动态代理织入增强，当</span><br><span class="line">配为<span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">poxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>时，表示使用CGLib动态代理技术织入增强。不过</span><br><span class="line">即使proxy-target-class设置为false，如果目标类没有声明接口，则spring将自动使用CGLib动态代理。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring的学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring08：整合MyBatis</title>
      <link href="/2022/05/08/Spring08%EF%BC%9A%E6%95%B4%E5%90%88MyBatis/"/>
      <url>/2022/05/08/Spring08%EF%BC%9A%E6%95%B4%E5%90%88MyBatis/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring08：整合MyBatis"><a href="#Spring08：整合MyBatis" class="headerlink" title="Spring08：整合MyBatis"></a>Spring08：整合MyBatis</h1><blockquote><p> 步骤 </p></blockquote><p> <strong>1、导入相关jar包</strong>  </p><p> <strong>junit</strong> </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>mybatis</strong> </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>mysql-connector-java</strong> </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>spring相关</strong> </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>aspectJ AOP 织入器</strong> </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>mybatis-spring整合包 【重点】</strong>  </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>配置Maven静态资源过滤问题！</strong>  </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>2、编写配置文件</strong>  </p><p> <strong>3、代码实现</strong> </p><blockquote><p> MyBatis 的编写！</p></blockquote><p> <strong>编写pojo实体类</strong> </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.pojo;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id; <span class="comment">//id</span></span><br><span class="line"><span class="keyword">private</span> String name; <span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">private</span> String pwd; <span class="comment">//密码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>实现mybatis的配置文件</strong> </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.kuang.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?</span></span></span><br><span class="line"><span class="string"><span class="tag">useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.kuang.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>UserDao接口编写</strong> </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>接口对应的Mapper映射文件</strong> </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>测试类</strong>  </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectUser</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; userList = mapper.selectUser();</span><br><span class="line"><span class="keyword">for</span> (User user: userList)&#123;</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line">sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> MyBatis-Spring学习  </p></blockquote><p> 引入Spring之前需要了解mybatis-spring包中的一些重要类； </p><p>官网： <a href="http://www.mybatis.org/spring/zh/index.html">http://www.mybatis.org/spring/zh/index.html</a> </p><p> 什么是 MyBatis-Spring？ </p><p> MyBatis-Spring 会帮助你将 MyBatis 代码无缝地整合到 Spring 中。 </p><p> 知识基础 </p><p> 在开始使用 MyBatis-Spring 之前，你需要先熟悉 Spring 和 MyBatis 这两个框架和有关它们的术语。这很重 要 </p><p> MyBatis-Spring 需要以下版本：  </p><p><img src="https://s1.ax1x.com/2022/05/18/OoSwUf.png"></p><p> 如果使用 Maven 作为构建工具，仅需要在 pom.xml 中加入以下代码即可： </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 要和 Spring 一起使用 MyBatis，需要在 Spring 应用上下文中定义至少两样东西：一个 SqlSessionFactory 和至少一个数据映射器类。 </p><p> 在 MyBatis-Spring 中，可使用SqlSessionFactoryBean来创建 SqlSessionFactory。要配置这个工厂 bean， 只需要把下面代码放在 Spring 的 XML 配置文件中：  </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 注意：SqlSessionFactory需要一个 DataSource（数据源）。这可以是任意的 DataSource，只需要和配置 其它 Spring 数据库连接一样配置它就可以了。 </p><p> 在基础的 MyBatis 用法中，是通过 SqlSessionFactoryBuilder 来创建 SqlSessionFactory 的。而在 MyBatisSpring 中，则使用 SqlSessionFactoryBean 来创建。  </p><p> 在 MyBatis 中，你可以使用 SqlSessionFactory 来创建 SqlSession。一旦你获得一个 session 之后，你可以 使用它来执行映射了的语句，提交或回滚连接，最后，当不再需要它的时候，你可以关闭 session。 </p><p> SqlSessionFactory有一个唯一的必要属性：用于 JDBC 的 DataSource。这可以是任意的 DataSource 对 象，它的配置方法和其它 Spring 数据库连接是一样的。  </p><p> 一个常用的属性是 configLocation，它用来指定 MyBatis 的 XML 配置文件路径。它在需要修改 MyBatis 的基 础配置非常有用。通常，基础配置指的是 &lt; settings&gt; 或 &lt; typeAliases&gt;元素。 </p><p> 需要注意的是，这个配置文件并不需要是一个完整的 MyBatis 配置。确切地说，任何环境配置 （），数据源（）和 MyBatis 的事务管理器（）都会被 忽略。SqlSessionFactoryBean 会创建它自有的 MyBatis 环境配置（Environment），并按要求设置自定义环 境的值。 </p><p>SqlSessionTemplate 是 MyBatis-Spring 的核心。作为 SqlSession 的一个实现，这意味着可以使用它无缝代 替你代码中已经在使用的 SqlSession。 </p><p>模板可以参与到 Spring 的事务管理中，并且由于其是线程安全的，可以供多个映射器类使用，你应该总是 用 SqlSessionTemplate 来替换 MyBatis 默认的 DefaultSqlSession 实现。在同一应用程序中的不同类之间混 杂使用可能会引起数据一致性的问题。 </p><p>可以使用 SqlSessionFactory 作为构造方法的参数来创建 SqlSessionTemplate 对象。  </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 现在，这个 bean 就可以直接注入到你的 DAO bean 中了。你需要在你的 bean 中添加一个 SqlSession 属 性，就像下面这样： </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"><span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSqlSession</span><span class="params">(SqlSession sqlSession)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.sqlSession = sqlSession;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(String userId)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sqlSession.getMapper...;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 按下面这样，注入 SqlSessionTemplate： </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.sample.dao.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p> 整合实现一  </p></blockquote><ol><li> 引入Spring配置文件beans.xml  </li></ol>   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li> 配置数据源替换mybaits的数据源 </li></ol>   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置数据源：数据源有非常多，可以使用第三方的，也可使使用Spring的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?</span></span></span><br><span class="line"><span class="string"><span class="tag">useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li> 配置SqlSessionFactory，关联MyBatis  </li></ol>   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置SqlSessionFactory--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--关联Mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/kuang/dao/*.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li> 注册sqlSessionTemplate，关联sqlSessionFactory；  </li></ol>   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册sqlSessionTemplate , 关联sqlSessionFactory--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--利用构造器注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li> 增加Dao接口的实现类；私有化sqlSessionTemplate  </li></ol>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"><span class="comment">//sqlSession不用我们自己创建了，Spring来管理</span></span><br><span class="line"><span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.sqlSession = sqlSession;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectUser</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li> 注册bean实现 </li></ol>   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.dao.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="7"><li> 测试  </li></ol>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> (UserMapper) context.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">List&lt;User&gt; user = mapper.selectUser();</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="8"><li> 结果成功输出！现在我们的Mybatis配置文件的状态！发现都可以被Spring整合！ </li></ol>   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.kuang.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p> 整合实现二 </p></blockquote><p> mybatis-spring1.2.3版以上的才有这个 </p><p> 官方文档截图 : </p><p> dao继承Support类 , 直接利用 getSqlSession() 获得 , 然后直接注入SqlSessionFactory . 比起方式1 , 不需要 管理SqlSessionTemplate , 而且对事务的支持更加友好 . 可跟踪源码查看 </p><p><img src="https://s1.ax1x.com/2022/05/18/OoSDPS.png"></p><p> 测试： </p><ol><li> 将我们上面写的UserDaoImpl修改一下 </li></ol>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title class_">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectUser</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> getSqlSession().getMapper(UserMapper.class);</span><br><span class="line"><span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li> 修改bean的配置 </li></ol>   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.dao.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li> 测试 </li></ol>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> (UserMapper) context.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">List&lt;User&gt; user = mapper.selectUser();</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>总结</strong> : 整合到spring以后可以完全不要mybatis的配置文件，除了这些方式可以实现整合之外，我们还 可以使用注解来实现，这个等我们后面学习SpringBoot的时候还会测试整合！ </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring的学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring09：声明式事务</title>
      <link href="/2022/05/08/Spring09%EF%BC%9A%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
      <url>/2022/05/08/Spring09%EF%BC%9A%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring09：声明式事务"><a href="#Spring09：声明式事务" class="headerlink" title="Spring09：声明式事务"></a>Spring09：声明式事务</h1><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务 !"></a>声明式事务 !</h2><blockquote><p> 回顾事务 </p></blockquote><ul><li> 事务在项目开发过程非常重要，涉及到数据的一致性的问题，不容马虎！ </li><li> 事务管理是企业级应用程序开发中必备技术，用来确保数据的完整性和一致性。 </li></ul><p> <strong>事务就是把一系列的动作当成一个独立的工作单元，这些动作要么全部完成，要么全部不起作用。</strong> </p><p> <strong>事务四个属性ACID</strong>  </p><ol><li><p>原子性（atomicity） </p><p> 事务是原子性操作，由一系列动作组成，事务的原子性确保动作要么全部完成，要么完全不起作用 </p></li><li><p>一致性（consistency） </p><p> 一旦所有事务动作完成，事务就要被提交。数据和资源处于一种满足业务规则的一致性状态中 </p></li><li><p>  隔离性（isolation） </p></li></ol><pre><code>可能多个事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏 </code></pre><ol start="4"><li><p>持久性（durability） </p><p> 事务一旦完成，无论系统发生什么错误，结果都不会受到影响。通常情况下，事务的结果被写到持 久化存储器中  </p></li></ol><blockquote><p> 测试 </p></blockquote><p> 在之前的案例中，我们给userDao接口新增两个方法，删除和增加用户； </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加一个用户</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br><span class="line"><span class="comment">//根据id删除用户</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteUser</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><p> mapper文件，我们故意把 deletes 写错，测试！  </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">deletes from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 编写接口的实现类，在实现类中，我们去操作一波 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title class_">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"><span class="comment">//增加一些操作</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectUser</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>,<span class="string">&quot;小明&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">mapper.addUser(user);</span><br><span class="line">mapper.deleteUser(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//新增</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> getSqlSession().getMapper(UserMapper.class);</span><br><span class="line"><span class="keyword">return</span> mapper.addUser(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteUser</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> getSqlSession().getMapper(UserMapper.class);</span><br><span class="line"><span class="keyword">return</span> mapper.deleteUser(id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 测试 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> (UserMapper) context.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">List&lt;User&gt; user = mapper.selectUser();</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 报错：sql异常，delete写错了 </p><p> 结果 ：插入成功！ </p><p> 没有进行事务的管理；我们想让他们都成功才成功，有一个失败，就都失败，我们就应该需要事务！ 以前我们都需要自己手动管理事务，十分麻烦！</p><p>但是<strong>Spring给我们提供了事务管理，我们只需要配置即可</strong>；  </p><blockquote><p> Spring中的事务管理 </p></blockquote><p> Spring在不同的事务管理API之上定义了一个抽象层，使得开发人员不必了解底层的事务管理API就可以使用 Spring的事务管理机制。Spring支持<strong>编程式事务管理和声明式的事务管理</strong>。 </p><p> <strong>编程式事务管理</strong> </p><ul><li> 将事务管理代码嵌到业务方法中来控制事务的提交和回滚  </li><li> 缺点：必须在每个事务操作业务逻辑中包含额外的事务管理代码 </li></ul><p> <strong>声明式事务管理</strong> </p><ul><li> 一般情况下比编程式事务好用。 </li><li> 将事务管理代码从业务方法中分离出来，以声明的方式来实现事务管理。 </li><li> 将事务管理作为横切关注点，通过aop方法模块化。Spring中通过Spring AOP框架支持声明式事务管理。 </li></ul><p> 使用Spring管理事务，注意头文件的约束导入 : tx </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">http://www.springframework.org/schema/tx</span><br><span class="line">http://www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt;</span><br></pre></td></tr></table></figure><p> <strong>事务管理器</strong> </p><ul><li> 无论使用Spring的哪种事务管理策略（编程式或者声明式）事务管理器都是必须的。  </li><li> 就是 Spring的核心事务管理抽象，管理封装了一组独立于技术的方法。 </li></ul><p> <strong>JDBC事务</strong> </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>配置好事务管理器后我们需要去配置事务的通知</strong> </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置哪些方法使用什么样的事务,配置事务的传播特性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;search*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>spring事务传播特性：</strong> </p><p> 事务传播行为就是多个事务方法相互调用时，事务如何在这些方法间传播。<strong>spring支持7种事务传播行为</strong>： </p><ul><li> <strong>propagation_requierd：</strong>如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事 务中，这是最常见的选择。 </li><li> <strong>propagation_supports：</strong>支持当前事务，如果没有当前事务，就以非事务方法执行。 </li><li> <strong>propagation_mandatory：</strong>使用当前事务，如果没有当前事务，就抛出异常。  </li><li> <strong>propagation_required_new：</strong>新建事务，如果当前存在事务，把当前事务挂起。 </li><li> <strong>propagation_not_supported：</strong>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 </li><li> <strong>propagation_never：</strong>以非事务方式执行操作，如果当前事务存在则抛出异常。 </li><li> <strong>propagation_nested：</strong>如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与 propagation_required类似的操作 </li></ul><p> <strong>Spring 默认的事务传播行为是 PROPAGATION_REQUIRED，它适合于绝大多数的情况。</strong>  </p><p> 假设 ServiveX#methodX() 都工作在事务环境下（即都被 Spring 事务增强了），假设程序中存在如下的调用 链：Service1#method1()-&gt;Service2#method2()-&gt;Service3#method3()，那么这 3 个服务类的 3 个方法通过 Spring 的事务传播机制都工作在同一个事务中。 </p><p> 就好比，我们刚才的几个方法存在调用，所以会被放在一组事务当中！ </p><p> <strong>配置AOP</strong>  </p><p> 导入aop的头文件！ </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置aop织入事务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.kuang.dao.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>进行测试</strong> </p><p> <strong>删掉刚才插入的数据，再次测试！</strong> </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> (UserMapper) context.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">List&lt;User&gt; user = mapper.selectUser();</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小结：至此，即可了解到了spring支持事务管理的强大！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring的学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2022/04/30/index/"/>
      <url>/2022/04/30/index/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>由于博客搬迁的原因，该博客的笔记内容会在后续都更新上传</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
