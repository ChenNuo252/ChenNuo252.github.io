<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring-01</title>
      <link href="/2022/05/08/Spring-01/"/>
      <url>/2022/05/08/Spring-01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring01：概述及IOC理论推导"><a href="#Spring01：概述及IOC理论推导" class="headerlink" title="Spring01：概述及IOC理论推导"></a>Spring01：概述及IOC理论推导</h1><blockquote><p>简介</p></blockquote><p><strong>Spring理念</strong> : 在我看来，Spring使现有技术更加实用 . 本身就是一个大杂烩 , 整合现有的框架的一个技术，主要的用途在于简化开发。 </p><p>官网 : <a href="http://spring.io/">http://spring.io/</a> </p><p>官方下载地址 : <a href="https://repo.spring.io/libs-release-local/org/springframework/spring/">https://repo.spring.io/libs-release-local/org/springframework/spring/</a> </p><p>GitHub : <a href="https://github.com/spring-projects">https://github.com/spring-projects</a>  </p><blockquote><p>优势</p></blockquote><ul><li>Spring是一个轻量级的、非入侵式的免费开源的框架、容器</li><li>具有控制反转IOC，面向切面AOP</li></ul><p>一句话：Spring是一个轻量级的控制反转（IOC）和面向切面（AOP）的容器（框架）。</p><blockquote><p>组成</p></blockquote><p><img src="" alt="https://s1.ax1x.com/2022/05/08/O3755R.png"></p><p> Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定 义了创建、配置和管理 bean 的方式 . </p><p><img src="" alt="https://s1.ax1x.com/2022/05/08/O3j8eK.png"></p><p> 组成 Spring 框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块 的功能如下： </p><ul><li> <strong>核心容器：</strong>核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory，它是工厂模 式的实现。BeanFactory 使用控制反转（IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。 </li><li><strong>Spring上下文：</strong>Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括 企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。 </li><li><strong>Spring Aop：</strong> 通过配置管理特性，Spring AOP 模块直接将面向切面的编程功能 , 集成到了 Spring 框 架中。所以，可以很容易地使 Spring 框架管理任何支持 AOP的对象。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖组件，就可以将声明性事 务管理集成到应用程序中。 </li><li><strong>Spring Dao：</strong> JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数 据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数 量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。 </li><li><strong>Spring Orm：</strong> Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。  </li><li><strong>Spring Web模块：</strong> Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了 上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请 求参数绑定到域对象的工作。 </li><li><strong>Spring Mvc框架：</strong> MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口， MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。 </li></ul><blockquote><p>SpringBoot-SpringClound</p></blockquote><ul><li> Spring Boot 是 Spring 的一套快速配置脚手架，可以基于Spring Boot 快速开发单个微服务; </li><li> Spring Cloud是基于Spring Boot实现的； </li><li> Spring Boot专注于快速、方便集成的单个微服务个体，Spring Cloud关注全局的服务治理框架； </li><li> Spring Boot使用了约束优于配置的理念，很多集成方案已经帮你选择好了，能不配置就不配置 , Spring Cloud很大的一部分是基于Spring Boot来实现，Spring Boot可以离开Spring Cloud独立使用开发项目， 但是Spring Cloud离不开Spring Boot，属于依赖的关系。  </li><li> SpringBoot在SpringClound中起到了承上启下的作用，如果你要学习SpringCloud必须要学习 SpringBoot。 </li></ul><p><img src="" alt="https://s1.ax1x.com/2022/05/08/O8pdq1.png"></p><blockquote><p>IOC的简介</p></blockquote><p> 想想以前所有东西都是由程序去进行控制创建 , 而现在是由我们自行控制创建对象 , 把主动权交给了调用者，程序不用去管怎么创建,怎么实现了它只负责提供一个接口这种思想 , 从本质上解决了问题 , 我们程序员不再去管理对象的创建了 , 更多的去关注业务的实现耦合性大大降低这也就是IOC的原型。</p><p><strong>本质：</strong>控制反转IoC(Inversion of Control)，是一种设计思想，DI(依赖注入)是实现IoC的一种方法，也有人认为DI只是IoC的另一种说法。没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。</p><p> <strong>IoC是Spring框架的核心内容</strong>，使用多种方式完美的实现了IoC，可以使用XML配置，也可以使用注解， 新版本的Spring也可以零配置实现IoC。 </p><p> Spring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再 从Ioc容器中取出需要的对象。  </p><p><img src="" alt="https://s1.ax1x.com/2022/05/09/O8ObdO.png"></p><p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一 体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。 控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。  <strong>明白IOC的思想，是理解Spring的核心技巧</strong> ！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring的学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试标签和分类</title>
      <link href="/2022/04/30/First/"/>
      <url>/2022/04/30/First/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>使用type类型来测试分类与标签</p><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h6 id="1、版本控制："><a href="#1、版本控制：" class="headerlink" title="1、版本控制："></a>1、版本控制：</h6><p>意思：版本迭代</p><p>版本开发，多人开发，就需要使用版本控制器：Git、SVN、CVS、VSS、TFS、Visual Studio Online</p><p>①、本地版本控制  本地</p><p>②、集中式版本控制  <strong>SVN</strong></p><p>③、分布式版本控制  <strong>Git</strong></p><h6 id="2、Git与SVN区别"><a href="#2、Git与SVN区别" class="headerlink" title="2、Git与SVN区别"></a>2、Git与SVN区别</h6><pre><code>     SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高；    Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上，协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到我们更新了那些代码和文件。</code></pre><p><strong>Git是目前世界上最先进的分布式版本控制系统。</strong> </p><h6 id="3、命令-Linux的命令"><a href="#3、命令-Linux的命令" class="headerlink" title="3、命令  Linux的命令"></a>3、命令  Linux的命令</h6><p>cd……    进入……</p><p>cd..    回退到上一个目录</p><p>pwd    显示当前目录</p><p>clear    清空</p><p>ls       列出目录中的文件</p><p>touch……    新建一个…… </p><p>rm……    删除一个……</p><p>mkdir……    新建一个……文件夹    </p><p>rm-r……    删除一个……文件</p><p>mv … …   将前者移动到后者</p><p>reset    重新设置（不怎么用）</p><p>history    使用的历史</p><p>help    帮助</p><p>exit    退出</p><p>注释 是 #</p><h6 id="4、Git配置"><a href="#4、Git配置" class="headerlink" title="4、Git配置"></a>4、Git配置</h6><p>​        所有的配置文件都保存在本地</p><p>git config -1    查看配置</p><p>git config –global –list   查看用户密码</p><p>(必须要配置的)</p><p>git config –global user.name “…”  设置配置的命名</p><p>git config –global user.email “…”  设置配置的邮箱</p><h6 id="5、理论（核心）"><a href="#5、理论（核心）" class="headerlink" title="5、理论（核心）"></a>5、理论（核心）</h6><p>环境变量，只是为了全局使用罢了。</p><p><img src="C:\Users\123\AppData\Roaming\Typora\typora-user-images\1645936041395.png" alt="1645936041395"></p><p><img src="C:\Users\123\AppData\Roaming\Typora\typora-user-images\1645936093884.png" alt="1645936093884"></p><p>本地仓库搭建：</p><p>git init  ：</p><p>克隆远程仓库：</p><p>git clone [url] htps://gitee.com/kuangstudy/openclass.git</p><h6 id="6、git文件操作"><a href="#6、git文件操作" class="headerlink" title="6、git文件操作"></a>6、git文件操作</h6><p>就例如工作中，要上传自己的工作成果</p><p>步骤：</p><p>git add.</p><p>git status</p><p>git commit -m        </p><p>还有一些忽略的文件需要使用一个文件进行忽略。</p><h6 id="7、码云（作为未来找工作的重要信息）认真做"><a href="#7、码云（作为未来找工作的重要信息）认真做" class="headerlink" title="7、码云（作为未来找工作的重要信息）认真做"></a>7、码云（作为未来找工作的重要信息）认真做</h6><p>国外：github</p><p>国内：gitee</p><p>设置本机绑定SSH公钥，实现免密码登录（！！！！）</p><p><img src="C:\Users\123\AppData\Roaming\Typora\typora-user-images\1645938001115.png" alt="1645938001115"></p><p>即可创建了，，，，，，</p><p>使用码云新建仓库：就可以了</p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2022/04/30/index/"/>
      <url>/2022/04/30/index/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>由于博客搬迁的原因，该博客的笔记内容会在后续都更新上传</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
